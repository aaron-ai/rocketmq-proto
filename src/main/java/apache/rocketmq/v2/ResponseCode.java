// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apache/rocketmq/v2/service.proto

package apache.rocketmq.v2;

/**
 * Protobuf enum {@code apache.rocketmq.v2.ResponseCode}
 */
public enum ResponseCode
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Success.
   * </pre>
   *
   * <code>OK = 0;</code>
   */
  OK(0),
  /**
   * <pre>
   * Format of access point is illegal.
   * </pre>
   *
   * <code>ILLEGAL_ACCESS_POINT = 1;</code>
   */
  ILLEGAL_ACCESS_POINT(1),
  /**
   * <pre>
   * Format of topic is illegal.
   * </pre>
   *
   * <code>ILLEGAL_TOPIC = 2;</code>
   */
  ILLEGAL_TOPIC(2),
  /**
   * <pre>
   * Format of consumer group is illegal.
   * </pre>
   *
   * <code>ILLEGAL_CONSUMER_GROUP = 3;</code>
   */
  ILLEGAL_CONSUMER_GROUP(3),
  /**
   * <pre>
   * Format of message tag is illegal.
   * </pre>
   *
   * <code>ILLEGAL_MESSAGE_TAG = 4;</code>
   */
  ILLEGAL_MESSAGE_TAG(4),
  /**
   * <pre>
   * Format of message key is illegal.
   * </pre>
   *
   * <code>ILLEGAL_MESSAGE_KEY = 5;</code>
   */
  ILLEGAL_MESSAGE_KEY(5),
  /**
   * <pre>
   * Size of message keys exceeds the threshold.
   * </pre>
   *
   * <code>MESSAGE_KEYS_TOO_LARGE = 6;</code>
   */
  MESSAGE_KEYS_TOO_LARGE(6),
  /**
   * <pre>
   * Format of message group is illegal.
   * </pre>
   *
   * <code>ILLEGAL_MESSAGE_GROUP = 7;</code>
   */
  ILLEGAL_MESSAGE_GROUP(7),
  /**
   * <pre>
   * Format of message property key is illegal.
   * </pre>
   *
   * <code>ILLEGAL_MESSAGE_PROPERTY_KEY = 8;</code>
   */
  ILLEGAL_MESSAGE_PROPERTY_KEY(8),
  /**
   * <pre>
   * Message properties total size exceeds the threshold.
   * </pre>
   *
   * <code>MESSAGE_PROPERTIES_TOO_LARGE = 9;</code>
   */
  MESSAGE_PROPERTIES_TOO_LARGE(9),
  /**
   * <pre>
   * Message body size exceeds the threshold.
   * </pre>
   *
   * <code>MESSAGE_BODY_TOO_LARGE = 10;</code>
   */
  MESSAGE_BODY_TOO_LARGE(10),
  /**
   * <pre>
   * User does have the permission to operate.
   * </pre>
   *
   * <code>REQUEST_AUTHORISATION_FAILURE = 11;</code>
   */
  REQUEST_AUTHORISATION_FAILURE(11),
  /**
   * <pre>
   * User's identity could not be recognized.
   * </pre>
   *
   * <code>REQUEST_AUTHENTICATION_FAILURE = 12;</code>
   */
  REQUEST_AUTHENTICATION_FAILURE(12),
  /**
   * <pre>
   * Topic resource does not exist.
   * </pre>
   *
   * <code>TOPIC_DOES_NOT_EXIST = 13;</code>
   */
  TOPIC_DOES_NOT_EXIST(13),
  /**
   * <pre>
   * Consumer group resource does not exist.
   * </pre>
   *
   * <code>CONSUMER_GROUP_DOES_NOT_EXIST = 14;</code>
   */
  CONSUMER_GROUP_DOES_NOT_EXIST(14),
  /**
   * <pre>
   * Not allowed to verify message.
   * </pre>
   *
   * <code>VERIFY_MESSAGE_NOT_ALLOWED = 15;</code>
   */
  VERIFY_MESSAGE_NOT_ALLOWED(15),
  /**
   * <pre>
   * Failed to consume message.
   * </pre>
   *
   * <code>FAILED_TO_CONSUME_MESSAGE = 16;</code>
   */
  FAILED_TO_CONSUME_MESSAGE(16),
  /**
   * <pre>
   * Message is corrupted.
   * </pre>
   *
   * <code>MESSAGE_CORRUPTED = 17;</code>
   */
  MESSAGE_CORRUPTED(17),
  /**
   * <pre>
   * Flow control.
   * </pre>
   *
   * <code>REQUEST_FLOW_CONTROL = 18;</code>
   */
  REQUEST_FLOW_CONTROL(18),
  /**
   * <pre>
   * Ack request is expired.
   * </pre>
   *
   * <code>ACKNOWLEDGEMENT_EXPIRED = 19;</code>
   */
  ACKNOWLEDGEMENT_EXPIRED(19),
  /**
   * <pre>
   * Message property is not match the message type.
   * </pre>
   *
   * <code>MESSAGE_PROPERTY_DOES_NOT_MATCH_MESSAGE_TYPE = 20;</code>
   */
  MESSAGE_PROPERTY_DOES_NOT_MATCH_MESSAGE_TYPE(20),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Success.
   * </pre>
   *
   * <code>OK = 0;</code>
   */
  public static final int OK_VALUE = 0;
  /**
   * <pre>
   * Format of access point is illegal.
   * </pre>
   *
   * <code>ILLEGAL_ACCESS_POINT = 1;</code>
   */
  public static final int ILLEGAL_ACCESS_POINT_VALUE = 1;
  /**
   * <pre>
   * Format of topic is illegal.
   * </pre>
   *
   * <code>ILLEGAL_TOPIC = 2;</code>
   */
  public static final int ILLEGAL_TOPIC_VALUE = 2;
  /**
   * <pre>
   * Format of consumer group is illegal.
   * </pre>
   *
   * <code>ILLEGAL_CONSUMER_GROUP = 3;</code>
   */
  public static final int ILLEGAL_CONSUMER_GROUP_VALUE = 3;
  /**
   * <pre>
   * Format of message tag is illegal.
   * </pre>
   *
   * <code>ILLEGAL_MESSAGE_TAG = 4;</code>
   */
  public static final int ILLEGAL_MESSAGE_TAG_VALUE = 4;
  /**
   * <pre>
   * Format of message key is illegal.
   * </pre>
   *
   * <code>ILLEGAL_MESSAGE_KEY = 5;</code>
   */
  public static final int ILLEGAL_MESSAGE_KEY_VALUE = 5;
  /**
   * <pre>
   * Size of message keys exceeds the threshold.
   * </pre>
   *
   * <code>MESSAGE_KEYS_TOO_LARGE = 6;</code>
   */
  public static final int MESSAGE_KEYS_TOO_LARGE_VALUE = 6;
  /**
   * <pre>
   * Format of message group is illegal.
   * </pre>
   *
   * <code>ILLEGAL_MESSAGE_GROUP = 7;</code>
   */
  public static final int ILLEGAL_MESSAGE_GROUP_VALUE = 7;
  /**
   * <pre>
   * Format of message property key is illegal.
   * </pre>
   *
   * <code>ILLEGAL_MESSAGE_PROPERTY_KEY = 8;</code>
   */
  public static final int ILLEGAL_MESSAGE_PROPERTY_KEY_VALUE = 8;
  /**
   * <pre>
   * Message properties total size exceeds the threshold.
   * </pre>
   *
   * <code>MESSAGE_PROPERTIES_TOO_LARGE = 9;</code>
   */
  public static final int MESSAGE_PROPERTIES_TOO_LARGE_VALUE = 9;
  /**
   * <pre>
   * Message body size exceeds the threshold.
   * </pre>
   *
   * <code>MESSAGE_BODY_TOO_LARGE = 10;</code>
   */
  public static final int MESSAGE_BODY_TOO_LARGE_VALUE = 10;
  /**
   * <pre>
   * User does have the permission to operate.
   * </pre>
   *
   * <code>REQUEST_AUTHORISATION_FAILURE = 11;</code>
   */
  public static final int REQUEST_AUTHORISATION_FAILURE_VALUE = 11;
  /**
   * <pre>
   * User's identity could not be recognized.
   * </pre>
   *
   * <code>REQUEST_AUTHENTICATION_FAILURE = 12;</code>
   */
  public static final int REQUEST_AUTHENTICATION_FAILURE_VALUE = 12;
  /**
   * <pre>
   * Topic resource does not exist.
   * </pre>
   *
   * <code>TOPIC_DOES_NOT_EXIST = 13;</code>
   */
  public static final int TOPIC_DOES_NOT_EXIST_VALUE = 13;
  /**
   * <pre>
   * Consumer group resource does not exist.
   * </pre>
   *
   * <code>CONSUMER_GROUP_DOES_NOT_EXIST = 14;</code>
   */
  public static final int CONSUMER_GROUP_DOES_NOT_EXIST_VALUE = 14;
  /**
   * <pre>
   * Not allowed to verify message.
   * </pre>
   *
   * <code>VERIFY_MESSAGE_NOT_ALLOWED = 15;</code>
   */
  public static final int VERIFY_MESSAGE_NOT_ALLOWED_VALUE = 15;
  /**
   * <pre>
   * Failed to consume message.
   * </pre>
   *
   * <code>FAILED_TO_CONSUME_MESSAGE = 16;</code>
   */
  public static final int FAILED_TO_CONSUME_MESSAGE_VALUE = 16;
  /**
   * <pre>
   * Message is corrupted.
   * </pre>
   *
   * <code>MESSAGE_CORRUPTED = 17;</code>
   */
  public static final int MESSAGE_CORRUPTED_VALUE = 17;
  /**
   * <pre>
   * Flow control.
   * </pre>
   *
   * <code>REQUEST_FLOW_CONTROL = 18;</code>
   */
  public static final int REQUEST_FLOW_CONTROL_VALUE = 18;
  /**
   * <pre>
   * Ack request is expired.
   * </pre>
   *
   * <code>ACKNOWLEDGEMENT_EXPIRED = 19;</code>
   */
  public static final int ACKNOWLEDGEMENT_EXPIRED_VALUE = 19;
  /**
   * <pre>
   * Message property is not match the message type.
   * </pre>
   *
   * <code>MESSAGE_PROPERTY_DOES_NOT_MATCH_MESSAGE_TYPE = 20;</code>
   */
  public static final int MESSAGE_PROPERTY_DOES_NOT_MATCH_MESSAGE_TYPE_VALUE = 20;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ResponseCode valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ResponseCode forNumber(int value) {
    switch (value) {
      case 0: return OK;
      case 1: return ILLEGAL_ACCESS_POINT;
      case 2: return ILLEGAL_TOPIC;
      case 3: return ILLEGAL_CONSUMER_GROUP;
      case 4: return ILLEGAL_MESSAGE_TAG;
      case 5: return ILLEGAL_MESSAGE_KEY;
      case 6: return MESSAGE_KEYS_TOO_LARGE;
      case 7: return ILLEGAL_MESSAGE_GROUP;
      case 8: return ILLEGAL_MESSAGE_PROPERTY_KEY;
      case 9: return MESSAGE_PROPERTIES_TOO_LARGE;
      case 10: return MESSAGE_BODY_TOO_LARGE;
      case 11: return REQUEST_AUTHORISATION_FAILURE;
      case 12: return REQUEST_AUTHENTICATION_FAILURE;
      case 13: return TOPIC_DOES_NOT_EXIST;
      case 14: return CONSUMER_GROUP_DOES_NOT_EXIST;
      case 15: return VERIFY_MESSAGE_NOT_ALLOWED;
      case 16: return FAILED_TO_CONSUME_MESSAGE;
      case 17: return MESSAGE_CORRUPTED;
      case 18: return REQUEST_FLOW_CONTROL;
      case 19: return ACKNOWLEDGEMENT_EXPIRED;
      case 20: return MESSAGE_PROPERTY_DOES_NOT_MATCH_MESSAGE_TYPE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ResponseCode>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ResponseCode> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ResponseCode>() {
          public ResponseCode findValueByNumber(int number) {
            return ResponseCode.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return apache.rocketmq.v2.MQService.getDescriptor().getEnumTypes().get(0);
  }

  private static final ResponseCode[] VALUES = values();

  public static ResponseCode valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ResponseCode(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:apache.rocketmq.v2.ResponseCode)
}

