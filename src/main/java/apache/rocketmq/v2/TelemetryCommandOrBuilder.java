// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apache/rocketmq/v2/service.proto

package apache.rocketmq.v2;

public interface TelemetryCommandOrBuilder extends
    // @@protoc_insertion_point(interface_extends:apache.rocketmq.v2.TelemetryCommand)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>.apache.rocketmq.v2.Settings settings = 1;</code>
   * @return Whether the settings field is set.
   */
  boolean hasSettings();
  /**
   * <code>.apache.rocketmq.v2.Settings settings = 1;</code>
   * @return The settings.
   */
  apache.rocketmq.v2.Settings getSettings();
  /**
   * <code>.apache.rocketmq.v2.Settings settings = 1;</code>
   */
  apache.rocketmq.v2.SettingsOrBuilder getSettingsOrBuilder();

  /**
   * <pre>
   * These messages are from client.
   * Report thread stack trace to server.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.ThreadStackTrace thread_stack_trace = 2;</code>
   * @return Whether the threadStackTrace field is set.
   */
  boolean hasThreadStackTrace();
  /**
   * <pre>
   * These messages are from client.
   * Report thread stack trace to server.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.ThreadStackTrace thread_stack_trace = 2;</code>
   * @return The threadStackTrace.
   */
  apache.rocketmq.v2.ThreadStackTrace getThreadStackTrace();
  /**
   * <pre>
   * These messages are from client.
   * Report thread stack trace to server.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.ThreadStackTrace thread_stack_trace = 2;</code>
   */
  apache.rocketmq.v2.ThreadStackTraceOrBuilder getThreadStackTraceOrBuilder();

  /**
   * <pre>
   * Report message verify result to server.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.VerifyMessageResult verify_message_result = 3;</code>
   * @return Whether the verifyMessageResult field is set.
   */
  boolean hasVerifyMessageResult();
  /**
   * <pre>
   * Report message verify result to server.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.VerifyMessageResult verify_message_result = 3;</code>
   * @return The verifyMessageResult.
   */
  apache.rocketmq.v2.VerifyMessageResult getVerifyMessageResult();
  /**
   * <pre>
   * Report message verify result to server.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.VerifyMessageResult verify_message_result = 3;</code>
   */
  apache.rocketmq.v2.VerifyMessageResultOrBuilder getVerifyMessageResultOrBuilder();

  /**
   * <pre>
   * There messages are from server.
   * Request client to recover the orphaned transaction message.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.RecoverOrphanedTransactionCommand recover_orphaned_transaction_command = 4;</code>
   * @return Whether the recoverOrphanedTransactionCommand field is set.
   */
  boolean hasRecoverOrphanedTransactionCommand();
  /**
   * <pre>
   * There messages are from server.
   * Request client to recover the orphaned transaction message.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.RecoverOrphanedTransactionCommand recover_orphaned_transaction_command = 4;</code>
   * @return The recoverOrphanedTransactionCommand.
   */
  apache.rocketmq.v2.RecoverOrphanedTransactionCommand getRecoverOrphanedTransactionCommand();
  /**
   * <pre>
   * There messages are from server.
   * Request client to recover the orphaned transaction message.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.RecoverOrphanedTransactionCommand recover_orphaned_transaction_command = 4;</code>
   */
  apache.rocketmq.v2.RecoverOrphanedTransactionCommandOrBuilder getRecoverOrphanedTransactionCommandOrBuilder();

  /**
   * <pre>
   * Request client to print thread stack trace.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.PrintThreadStackTraceCommand print_thread_stack_trace_command = 5;</code>
   * @return Whether the printThreadStackTraceCommand field is set.
   */
  boolean hasPrintThreadStackTraceCommand();
  /**
   * <pre>
   * Request client to print thread stack trace.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.PrintThreadStackTraceCommand print_thread_stack_trace_command = 5;</code>
   * @return The printThreadStackTraceCommand.
   */
  apache.rocketmq.v2.PrintThreadStackTraceCommand getPrintThreadStackTraceCommand();
  /**
   * <pre>
   * Request client to print thread stack trace.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.PrintThreadStackTraceCommand print_thread_stack_trace_command = 5;</code>
   */
  apache.rocketmq.v2.PrintThreadStackTraceCommandOrBuilder getPrintThreadStackTraceCommandOrBuilder();

  /**
   * <pre>
   * Request client to verify the consumption of the appointed message.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.VerifyMessageCommand verify_message_command = 6;</code>
   * @return Whether the verifyMessageCommand field is set.
   */
  boolean hasVerifyMessageCommand();
  /**
   * <pre>
   * Request client to verify the consumption of the appointed message.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.VerifyMessageCommand verify_message_command = 6;</code>
   * @return The verifyMessageCommand.
   */
  apache.rocketmq.v2.VerifyMessageCommand getVerifyMessageCommand();
  /**
   * <pre>
   * Request client to verify the consumption of the appointed message.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.VerifyMessageCommand verify_message_command = 6;</code>
   */
  apache.rocketmq.v2.VerifyMessageCommandOrBuilder getVerifyMessageCommandOrBuilder();

  public apache.rocketmq.v2.TelemetryCommand.CommandCase getCommandCase();
}
