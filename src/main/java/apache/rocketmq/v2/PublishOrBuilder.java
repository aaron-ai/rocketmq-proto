// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apache/rocketmq/v2/definition.proto

package apache.rocketmq.v2;

public interface PublishOrBuilder extends
    // @@protoc_insertion_point(interface_extends:apache.rocketmq.v2.Publish)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Publisher normally registers topics in interest, such that
   * pre-conditions may be examined and validated.
   * </pre>
   *
   * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
   */
  java.util.List<apache.rocketmq.v2.Resource> 
      getTopicsList();
  /**
   * <pre>
   * Publisher normally registers topics in interest, such that
   * pre-conditions may be examined and validated.
   * </pre>
   *
   * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
   */
  apache.rocketmq.v2.Resource getTopics(int index);
  /**
   * <pre>
   * Publisher normally registers topics in interest, such that
   * pre-conditions may be examined and validated.
   * </pre>
   *
   * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
   */
  int getTopicsCount();
  /**
   * <pre>
   * Publisher normally registers topics in interest, such that
   * pre-conditions may be examined and validated.
   * </pre>
   *
   * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
   */
  java.util.List<? extends apache.rocketmq.v2.ResourceOrBuilder> 
      getTopicsOrBuilderList();
  /**
   * <pre>
   * Publisher normally registers topics in interest, such that
   * pre-conditions may be examined and validated.
   * </pre>
   *
   * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
   */
  apache.rocketmq.v2.ResourceOrBuilder getTopicsOrBuilder(
      int index);

  /**
   * <pre>
   * If a transactional message stay unresolved for more than
   * `transaction_orphan_threshold`, it would be regarded as an
   * orphan. Servers that manages orphan messages would pick up
   * a capable publisher to resolve
   * </pre>
   *
   * <code>.google.protobuf.Duration transaction_orphan_threshold = 2;</code>
   * @return Whether the transactionOrphanThreshold field is set.
   */
  boolean hasTransactionOrphanThreshold();
  /**
   * <pre>
   * If a transactional message stay unresolved for more than
   * `transaction_orphan_threshold`, it would be regarded as an
   * orphan. Servers that manages orphan messages would pick up
   * a capable publisher to resolve
   * </pre>
   *
   * <code>.google.protobuf.Duration transaction_orphan_threshold = 2;</code>
   * @return The transactionOrphanThreshold.
   */
  com.google.protobuf.Duration getTransactionOrphanThreshold();
  /**
   * <pre>
   * If a transactional message stay unresolved for more than
   * `transaction_orphan_threshold`, it would be regarded as an
   * orphan. Servers that manages orphan messages would pick up
   * a capable publisher to resolve
   * </pre>
   *
   * <code>.google.protobuf.Duration transaction_orphan_threshold = 2;</code>
   */
  com.google.protobuf.DurationOrBuilder getTransactionOrphanThresholdOrBuilder();

  /**
   * <pre>
   * If publishing message experiences RPC failure, `retry_policy` describes
   * backoff policy before retries are made.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.RetryPolicy retry_policy = 3;</code>
   * @return Whether the retryPolicy field is set.
   */
  boolean hasRetryPolicy();
  /**
   * <pre>
   * If publishing message experiences RPC failure, `retry_policy` describes
   * backoff policy before retries are made.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.RetryPolicy retry_policy = 3;</code>
   * @return The retryPolicy.
   */
  apache.rocketmq.v2.RetryPolicy getRetryPolicy();
  /**
   * <pre>
   * If publishing message experiences RPC failure, `retry_policy` describes
   * backoff policy before retries are made.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.RetryPolicy retry_policy = 3;</code>
   */
  apache.rocketmq.v2.RetryPolicyOrBuilder getRetryPolicyOrBuilder();

  /**
   * <pre>
   * If message body size exceeds `compress_threshold`, it would be desirable to
   * compress it to relieve network overhead.
   * </pre>
   *
   * <code>int32 compress_threshold = 4;</code>
   * @return The compressThreshold.
   */
  int getCompressThreshold();

  /**
   * <pre>
   * Max message size in bytes permitted by server.
   * </pre>
   *
   * <code>int32 max_message_bytes = 5;</code>
   * @return The maxMessageBytes.
   */
  int getMaxMessageBytes();
}
