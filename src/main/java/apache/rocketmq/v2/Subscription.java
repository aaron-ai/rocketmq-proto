// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apache/rocketmq/v2/definition.proto

package apache.rocketmq.v2;

/**
 * Protobuf type {@code apache.rocketmq.v2.Subscription}
 */
public final class Subscription extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:apache.rocketmq.v2.Subscription)
    SubscriptionOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Subscription.newBuilder() to construct.
  private Subscription(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Subscription() {
    subscriptions_ = java.util.Collections.emptyList();
    consumeType_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Subscription();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Subscription(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            apache.rocketmq.v2.Resource.Builder subBuilder = null;
            if (group_ != null) {
              subBuilder = group_.toBuilder();
            }
            group_ = input.readMessage(apache.rocketmq.v2.Resource.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(group_);
              group_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000001) != 0)) {
              subscriptions_ = new java.util.ArrayList<apache.rocketmq.v2.SubscriptionEntry>();
              mutable_bitField0_ |= 0x00000001;
            }
            subscriptions_.add(
                input.readMessage(apache.rocketmq.v2.SubscriptionEntry.parser(), extensionRegistry));
            break;
          }
          case 26: {
            apache.rocketmq.v2.DeadLetterPolicy.Builder subBuilder = null;
            if (deadLetterPolicy_ != null) {
              subBuilder = deadLetterPolicy_.toBuilder();
            }
            deadLetterPolicy_ = input.readMessage(apache.rocketmq.v2.DeadLetterPolicy.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(deadLetterPolicy_);
              deadLetterPolicy_ = subBuilder.buildPartial();
            }

            break;
          }
          case 32: {
            int rawValue = input.readEnum();

            consumeType_ = rawValue;
            break;
          }
          case 40: {

            fifo_ = input.readBool();
            break;
          }
          case 50: {
            apache.rocketmq.v2.RetryPolicy.Builder subBuilder = null;
            if (retryPolicy_ != null) {
              subBuilder = retryPolicy_.toBuilder();
            }
            retryPolicy_ = input.readMessage(apache.rocketmq.v2.RetryPolicy.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(retryPolicy_);
              retryPolicy_ = subBuilder.buildPartial();
            }

            break;
          }
          case 58: {
            apache.rocketmq.v2.RetryPolicy.Builder subBuilder = null;
            if (consumeBackoffPolicy_ != null) {
              subBuilder = consumeBackoffPolicy_.toBuilder();
            }
            consumeBackoffPolicy_ = input.readMessage(apache.rocketmq.v2.RetryPolicy.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(consumeBackoffPolicy_);
              consumeBackoffPolicy_ = subBuilder.buildPartial();
            }

            break;
          }
          case 64: {

            maxReceiveBatchSize_ = input.readInt32();
            break;
          }
          case 72: {

            messagesPerTask_ = input.readInt32();
            break;
          }
          case 82: {
            apache.rocketmq.v2.CacheLimits.Builder subBuilder = null;
            if (cacheLimits_ != null) {
              subBuilder = cacheLimits_.toBuilder();
            }
            cacheLimits_ = input.readMessage(apache.rocketmq.v2.CacheLimits.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(cacheLimits_);
              cacheLimits_ = subBuilder.buildPartial();
            }

            break;
          }
          case 88: {

            consumeThreadCount_ = input.readInt32();
            break;
          }
          case 98: {
            com.google.protobuf.Duration.Builder subBuilder = null;
            if (maxInvisibleDuration_ != null) {
              subBuilder = maxInvisibleDuration_.toBuilder();
            }
            maxInvisibleDuration_ = input.readMessage(com.google.protobuf.Duration.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(maxInvisibleDuration_);
              maxInvisibleDuration_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) != 0)) {
        subscriptions_ = java.util.Collections.unmodifiableList(subscriptions_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return apache.rocketmq.v2.MQDomain.internal_static_apache_rocketmq_v2_Subscription_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return apache.rocketmq.v2.MQDomain.internal_static_apache_rocketmq_v2_Subscription_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            apache.rocketmq.v2.Subscription.class, apache.rocketmq.v2.Subscription.Builder.class);
  }

  public static final int GROUP_FIELD_NUMBER = 1;
  private apache.rocketmq.v2.Resource group_;
  /**
   * <code>.apache.rocketmq.v2.Resource group = 1;</code>
   * @return Whether the group field is set.
   */
  @java.lang.Override
  public boolean hasGroup() {
    return group_ != null;
  }
  /**
   * <code>.apache.rocketmq.v2.Resource group = 1;</code>
   * @return The group.
   */
  @java.lang.Override
  public apache.rocketmq.v2.Resource getGroup() {
    return group_ == null ? apache.rocketmq.v2.Resource.getDefaultInstance() : group_;
  }
  /**
   * <code>.apache.rocketmq.v2.Resource group = 1;</code>
   */
  @java.lang.Override
  public apache.rocketmq.v2.ResourceOrBuilder getGroupOrBuilder() {
    return getGroup();
  }

  public static final int SUBSCRIPTIONS_FIELD_NUMBER = 2;
  private java.util.List<apache.rocketmq.v2.SubscriptionEntry> subscriptions_;
  /**
   * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
   */
  @java.lang.Override
  public java.util.List<apache.rocketmq.v2.SubscriptionEntry> getSubscriptionsList() {
    return subscriptions_;
  }
  /**
   * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
   */
  @java.lang.Override
  public java.util.List<? extends apache.rocketmq.v2.SubscriptionEntryOrBuilder> 
      getSubscriptionsOrBuilderList() {
    return subscriptions_;
  }
  /**
   * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
   */
  @java.lang.Override
  public int getSubscriptionsCount() {
    return subscriptions_.size();
  }
  /**
   * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
   */
  @java.lang.Override
  public apache.rocketmq.v2.SubscriptionEntry getSubscriptions(int index) {
    return subscriptions_.get(index);
  }
  /**
   * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
   */
  @java.lang.Override
  public apache.rocketmq.v2.SubscriptionEntryOrBuilder getSubscriptionsOrBuilder(
      int index) {
    return subscriptions_.get(index);
  }

  public static final int DEAD_LETTER_POLICY_FIELD_NUMBER = 3;
  private apache.rocketmq.v2.DeadLetterPolicy deadLetterPolicy_;
  /**
   * <code>.apache.rocketmq.v2.DeadLetterPolicy dead_letter_policy = 3;</code>
   * @return Whether the deadLetterPolicy field is set.
   */
  @java.lang.Override
  public boolean hasDeadLetterPolicy() {
    return deadLetterPolicy_ != null;
  }
  /**
   * <code>.apache.rocketmq.v2.DeadLetterPolicy dead_letter_policy = 3;</code>
   * @return The deadLetterPolicy.
   */
  @java.lang.Override
  public apache.rocketmq.v2.DeadLetterPolicy getDeadLetterPolicy() {
    return deadLetterPolicy_ == null ? apache.rocketmq.v2.DeadLetterPolicy.getDefaultInstance() : deadLetterPolicy_;
  }
  /**
   * <code>.apache.rocketmq.v2.DeadLetterPolicy dead_letter_policy = 3;</code>
   */
  @java.lang.Override
  public apache.rocketmq.v2.DeadLetterPolicyOrBuilder getDeadLetterPolicyOrBuilder() {
    return getDeadLetterPolicy();
  }

  public static final int CONSUME_TYPE_FIELD_NUMBER = 4;
  private int consumeType_;
  /**
   * <code>.apache.rocketmq.v2.ConsumeMessageType consume_type = 4;</code>
   * @return The enum numeric value on the wire for consumeType.
   */
  @java.lang.Override public int getConsumeTypeValue() {
    return consumeType_;
  }
  /**
   * <code>.apache.rocketmq.v2.ConsumeMessageType consume_type = 4;</code>
   * @return The consumeType.
   */
  @java.lang.Override public apache.rocketmq.v2.ConsumeMessageType getConsumeType() {
    @SuppressWarnings("deprecation")
    apache.rocketmq.v2.ConsumeMessageType result = apache.rocketmq.v2.ConsumeMessageType.valueOf(consumeType_);
    return result == null ? apache.rocketmq.v2.ConsumeMessageType.UNRECOGNIZED : result;
  }

  public static final int FIFO_FIELD_NUMBER = 5;
  private boolean fifo_;
  /**
   * <code>bool fifo = 5;</code>
   * @return The fifo.
   */
  @java.lang.Override
  public boolean getFifo() {
    return fifo_;
  }

  public static final int RETRY_POLICY_FIELD_NUMBER = 6;
  private apache.rocketmq.v2.RetryPolicy retryPolicy_;
  /**
   * <pre>
   * For RPC
   * </pre>
   *
   * <code>.apache.rocketmq.v2.RetryPolicy retry_policy = 6;</code>
   * @return Whether the retryPolicy field is set.
   */
  @java.lang.Override
  public boolean hasRetryPolicy() {
    return retryPolicy_ != null;
  }
  /**
   * <pre>
   * For RPC
   * </pre>
   *
   * <code>.apache.rocketmq.v2.RetryPolicy retry_policy = 6;</code>
   * @return The retryPolicy.
   */
  @java.lang.Override
  public apache.rocketmq.v2.RetryPolicy getRetryPolicy() {
    return retryPolicy_ == null ? apache.rocketmq.v2.RetryPolicy.getDefaultInstance() : retryPolicy_;
  }
  /**
   * <pre>
   * For RPC
   * </pre>
   *
   * <code>.apache.rocketmq.v2.RetryPolicy retry_policy = 6;</code>
   */
  @java.lang.Override
  public apache.rocketmq.v2.RetryPolicyOrBuilder getRetryPolicyOrBuilder() {
    return getRetryPolicy();
  }

  public static final int CONSUME_BACKOFF_POLICY_FIELD_NUMBER = 7;
  private apache.rocketmq.v2.RetryPolicy consumeBackoffPolicy_;
  /**
   * <pre>
   * For PushConsumer
   * </pre>
   *
   * <code>.apache.rocketmq.v2.RetryPolicy consume_backoff_policy = 7;</code>
   * @return Whether the consumeBackoffPolicy field is set.
   */
  @java.lang.Override
  public boolean hasConsumeBackoffPolicy() {
    return consumeBackoffPolicy_ != null;
  }
  /**
   * <pre>
   * For PushConsumer
   * </pre>
   *
   * <code>.apache.rocketmq.v2.RetryPolicy consume_backoff_policy = 7;</code>
   * @return The consumeBackoffPolicy.
   */
  @java.lang.Override
  public apache.rocketmq.v2.RetryPolicy getConsumeBackoffPolicy() {
    return consumeBackoffPolicy_ == null ? apache.rocketmq.v2.RetryPolicy.getDefaultInstance() : consumeBackoffPolicy_;
  }
  /**
   * <pre>
   * For PushConsumer
   * </pre>
   *
   * <code>.apache.rocketmq.v2.RetryPolicy consume_backoff_policy = 7;</code>
   */
  @java.lang.Override
  public apache.rocketmq.v2.RetryPolicyOrBuilder getConsumeBackoffPolicyOrBuilder() {
    return getConsumeBackoffPolicy();
  }

  public static final int MAX_RECEIVE_BATCH_SIZE_FIELD_NUMBER = 8;
  private int maxReceiveBatchSize_;
  /**
   * <code>int32 max_receive_batch_size = 8;</code>
   * @return The maxReceiveBatchSize.
   */
  @java.lang.Override
  public int getMaxReceiveBatchSize() {
    return maxReceiveBatchSize_;
  }

  public static final int MESSAGES_PER_TASK_FIELD_NUMBER = 9;
  private int messagesPerTask_;
  /**
   * <pre>
   * After messages are received from servers, consumers normally split them
   * into multiple mini-batches. Each mini-batch is assigned to a dedicated
   * task, which will be submitted to thread-pool to run concurrently.
   * </pre>
   *
   * <code>int32 messages_per_task = 9;</code>
   * @return The messagesPerTask.
   */
  @java.lang.Override
  public int getMessagesPerTask() {
    return messagesPerTask_;
  }

  public static final int CACHE_LIMITS_FIELD_NUMBER = 10;
  private apache.rocketmq.v2.CacheLimits cacheLimits_;
  /**
   * <code>.apache.rocketmq.v2.CacheLimits cache_limits = 10;</code>
   * @return Whether the cacheLimits field is set.
   */
  @java.lang.Override
  public boolean hasCacheLimits() {
    return cacheLimits_ != null;
  }
  /**
   * <code>.apache.rocketmq.v2.CacheLimits cache_limits = 10;</code>
   * @return The cacheLimits.
   */
  @java.lang.Override
  public apache.rocketmq.v2.CacheLimits getCacheLimits() {
    return cacheLimits_ == null ? apache.rocketmq.v2.CacheLimits.getDefaultInstance() : cacheLimits_;
  }
  /**
   * <code>.apache.rocketmq.v2.CacheLimits cache_limits = 10;</code>
   */
  @java.lang.Override
  public apache.rocketmq.v2.CacheLimitsOrBuilder getCacheLimitsOrBuilder() {
    return getCacheLimits();
  }

  public static final int CONSUME_THREAD_COUNT_FIELD_NUMBER = 11;
  private int consumeThreadCount_;
  /**
   * <code>int32 consume_thread_count = 11;</code>
   * @return The consumeThreadCount.
   */
  @java.lang.Override
  public int getConsumeThreadCount() {
    return consumeThreadCount_;
  }

  public static final int MAX_INVISIBLE_DURATION_FIELD_NUMBER = 12;
  private com.google.protobuf.Duration maxInvisibleDuration_;
  /**
   * <pre>
   * Up to server
   * </pre>
   *
   * <code>.google.protobuf.Duration max_invisible_duration = 12;</code>
   * @return Whether the maxInvisibleDuration field is set.
   */
  @java.lang.Override
  public boolean hasMaxInvisibleDuration() {
    return maxInvisibleDuration_ != null;
  }
  /**
   * <pre>
   * Up to server
   * </pre>
   *
   * <code>.google.protobuf.Duration max_invisible_duration = 12;</code>
   * @return The maxInvisibleDuration.
   */
  @java.lang.Override
  public com.google.protobuf.Duration getMaxInvisibleDuration() {
    return maxInvisibleDuration_ == null ? com.google.protobuf.Duration.getDefaultInstance() : maxInvisibleDuration_;
  }
  /**
   * <pre>
   * Up to server
   * </pre>
   *
   * <code>.google.protobuf.Duration max_invisible_duration = 12;</code>
   */
  @java.lang.Override
  public com.google.protobuf.DurationOrBuilder getMaxInvisibleDurationOrBuilder() {
    return getMaxInvisibleDuration();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (group_ != null) {
      output.writeMessage(1, getGroup());
    }
    for (int i = 0; i < subscriptions_.size(); i++) {
      output.writeMessage(2, subscriptions_.get(i));
    }
    if (deadLetterPolicy_ != null) {
      output.writeMessage(3, getDeadLetterPolicy());
    }
    if (consumeType_ != apache.rocketmq.v2.ConsumeMessageType.CONSUME_MESSAGE_TYPE_UNSPECIFIED.getNumber()) {
      output.writeEnum(4, consumeType_);
    }
    if (fifo_ != false) {
      output.writeBool(5, fifo_);
    }
    if (retryPolicy_ != null) {
      output.writeMessage(6, getRetryPolicy());
    }
    if (consumeBackoffPolicy_ != null) {
      output.writeMessage(7, getConsumeBackoffPolicy());
    }
    if (maxReceiveBatchSize_ != 0) {
      output.writeInt32(8, maxReceiveBatchSize_);
    }
    if (messagesPerTask_ != 0) {
      output.writeInt32(9, messagesPerTask_);
    }
    if (cacheLimits_ != null) {
      output.writeMessage(10, getCacheLimits());
    }
    if (consumeThreadCount_ != 0) {
      output.writeInt32(11, consumeThreadCount_);
    }
    if (maxInvisibleDuration_ != null) {
      output.writeMessage(12, getMaxInvisibleDuration());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (group_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getGroup());
    }
    for (int i = 0; i < subscriptions_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, subscriptions_.get(i));
    }
    if (deadLetterPolicy_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getDeadLetterPolicy());
    }
    if (consumeType_ != apache.rocketmq.v2.ConsumeMessageType.CONSUME_MESSAGE_TYPE_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, consumeType_);
    }
    if (fifo_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(5, fifo_);
    }
    if (retryPolicy_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getRetryPolicy());
    }
    if (consumeBackoffPolicy_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getConsumeBackoffPolicy());
    }
    if (maxReceiveBatchSize_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(8, maxReceiveBatchSize_);
    }
    if (messagesPerTask_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(9, messagesPerTask_);
    }
    if (cacheLimits_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getCacheLimits());
    }
    if (consumeThreadCount_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(11, consumeThreadCount_);
    }
    if (maxInvisibleDuration_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, getMaxInvisibleDuration());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof apache.rocketmq.v2.Subscription)) {
      return super.equals(obj);
    }
    apache.rocketmq.v2.Subscription other = (apache.rocketmq.v2.Subscription) obj;

    if (hasGroup() != other.hasGroup()) return false;
    if (hasGroup()) {
      if (!getGroup()
          .equals(other.getGroup())) return false;
    }
    if (!getSubscriptionsList()
        .equals(other.getSubscriptionsList())) return false;
    if (hasDeadLetterPolicy() != other.hasDeadLetterPolicy()) return false;
    if (hasDeadLetterPolicy()) {
      if (!getDeadLetterPolicy()
          .equals(other.getDeadLetterPolicy())) return false;
    }
    if (consumeType_ != other.consumeType_) return false;
    if (getFifo()
        != other.getFifo()) return false;
    if (hasRetryPolicy() != other.hasRetryPolicy()) return false;
    if (hasRetryPolicy()) {
      if (!getRetryPolicy()
          .equals(other.getRetryPolicy())) return false;
    }
    if (hasConsumeBackoffPolicy() != other.hasConsumeBackoffPolicy()) return false;
    if (hasConsumeBackoffPolicy()) {
      if (!getConsumeBackoffPolicy()
          .equals(other.getConsumeBackoffPolicy())) return false;
    }
    if (getMaxReceiveBatchSize()
        != other.getMaxReceiveBatchSize()) return false;
    if (getMessagesPerTask()
        != other.getMessagesPerTask()) return false;
    if (hasCacheLimits() != other.hasCacheLimits()) return false;
    if (hasCacheLimits()) {
      if (!getCacheLimits()
          .equals(other.getCacheLimits())) return false;
    }
    if (getConsumeThreadCount()
        != other.getConsumeThreadCount()) return false;
    if (hasMaxInvisibleDuration() != other.hasMaxInvisibleDuration()) return false;
    if (hasMaxInvisibleDuration()) {
      if (!getMaxInvisibleDuration()
          .equals(other.getMaxInvisibleDuration())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasGroup()) {
      hash = (37 * hash) + GROUP_FIELD_NUMBER;
      hash = (53 * hash) + getGroup().hashCode();
    }
    if (getSubscriptionsCount() > 0) {
      hash = (37 * hash) + SUBSCRIPTIONS_FIELD_NUMBER;
      hash = (53 * hash) + getSubscriptionsList().hashCode();
    }
    if (hasDeadLetterPolicy()) {
      hash = (37 * hash) + DEAD_LETTER_POLICY_FIELD_NUMBER;
      hash = (53 * hash) + getDeadLetterPolicy().hashCode();
    }
    hash = (37 * hash) + CONSUME_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + consumeType_;
    hash = (37 * hash) + FIFO_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getFifo());
    if (hasRetryPolicy()) {
      hash = (37 * hash) + RETRY_POLICY_FIELD_NUMBER;
      hash = (53 * hash) + getRetryPolicy().hashCode();
    }
    if (hasConsumeBackoffPolicy()) {
      hash = (37 * hash) + CONSUME_BACKOFF_POLICY_FIELD_NUMBER;
      hash = (53 * hash) + getConsumeBackoffPolicy().hashCode();
    }
    hash = (37 * hash) + MAX_RECEIVE_BATCH_SIZE_FIELD_NUMBER;
    hash = (53 * hash) + getMaxReceiveBatchSize();
    hash = (37 * hash) + MESSAGES_PER_TASK_FIELD_NUMBER;
    hash = (53 * hash) + getMessagesPerTask();
    if (hasCacheLimits()) {
      hash = (37 * hash) + CACHE_LIMITS_FIELD_NUMBER;
      hash = (53 * hash) + getCacheLimits().hashCode();
    }
    hash = (37 * hash) + CONSUME_THREAD_COUNT_FIELD_NUMBER;
    hash = (53 * hash) + getConsumeThreadCount();
    if (hasMaxInvisibleDuration()) {
      hash = (37 * hash) + MAX_INVISIBLE_DURATION_FIELD_NUMBER;
      hash = (53 * hash) + getMaxInvisibleDuration().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static apache.rocketmq.v2.Subscription parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static apache.rocketmq.v2.Subscription parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static apache.rocketmq.v2.Subscription parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static apache.rocketmq.v2.Subscription parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static apache.rocketmq.v2.Subscription parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static apache.rocketmq.v2.Subscription parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static apache.rocketmq.v2.Subscription parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static apache.rocketmq.v2.Subscription parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static apache.rocketmq.v2.Subscription parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static apache.rocketmq.v2.Subscription parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static apache.rocketmq.v2.Subscription parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static apache.rocketmq.v2.Subscription parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(apache.rocketmq.v2.Subscription prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code apache.rocketmq.v2.Subscription}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:apache.rocketmq.v2.Subscription)
      apache.rocketmq.v2.SubscriptionOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return apache.rocketmq.v2.MQDomain.internal_static_apache_rocketmq_v2_Subscription_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return apache.rocketmq.v2.MQDomain.internal_static_apache_rocketmq_v2_Subscription_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              apache.rocketmq.v2.Subscription.class, apache.rocketmq.v2.Subscription.Builder.class);
    }

    // Construct using apache.rocketmq.v2.Subscription.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getSubscriptionsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (groupBuilder_ == null) {
        group_ = null;
      } else {
        group_ = null;
        groupBuilder_ = null;
      }
      if (subscriptionsBuilder_ == null) {
        subscriptions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        subscriptionsBuilder_.clear();
      }
      if (deadLetterPolicyBuilder_ == null) {
        deadLetterPolicy_ = null;
      } else {
        deadLetterPolicy_ = null;
        deadLetterPolicyBuilder_ = null;
      }
      consumeType_ = 0;

      fifo_ = false;

      if (retryPolicyBuilder_ == null) {
        retryPolicy_ = null;
      } else {
        retryPolicy_ = null;
        retryPolicyBuilder_ = null;
      }
      if (consumeBackoffPolicyBuilder_ == null) {
        consumeBackoffPolicy_ = null;
      } else {
        consumeBackoffPolicy_ = null;
        consumeBackoffPolicyBuilder_ = null;
      }
      maxReceiveBatchSize_ = 0;

      messagesPerTask_ = 0;

      if (cacheLimitsBuilder_ == null) {
        cacheLimits_ = null;
      } else {
        cacheLimits_ = null;
        cacheLimitsBuilder_ = null;
      }
      consumeThreadCount_ = 0;

      if (maxInvisibleDurationBuilder_ == null) {
        maxInvisibleDuration_ = null;
      } else {
        maxInvisibleDuration_ = null;
        maxInvisibleDurationBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return apache.rocketmq.v2.MQDomain.internal_static_apache_rocketmq_v2_Subscription_descriptor;
    }

    @java.lang.Override
    public apache.rocketmq.v2.Subscription getDefaultInstanceForType() {
      return apache.rocketmq.v2.Subscription.getDefaultInstance();
    }

    @java.lang.Override
    public apache.rocketmq.v2.Subscription build() {
      apache.rocketmq.v2.Subscription result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public apache.rocketmq.v2.Subscription buildPartial() {
      apache.rocketmq.v2.Subscription result = new apache.rocketmq.v2.Subscription(this);
      int from_bitField0_ = bitField0_;
      if (groupBuilder_ == null) {
        result.group_ = group_;
      } else {
        result.group_ = groupBuilder_.build();
      }
      if (subscriptionsBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          subscriptions_ = java.util.Collections.unmodifiableList(subscriptions_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.subscriptions_ = subscriptions_;
      } else {
        result.subscriptions_ = subscriptionsBuilder_.build();
      }
      if (deadLetterPolicyBuilder_ == null) {
        result.deadLetterPolicy_ = deadLetterPolicy_;
      } else {
        result.deadLetterPolicy_ = deadLetterPolicyBuilder_.build();
      }
      result.consumeType_ = consumeType_;
      result.fifo_ = fifo_;
      if (retryPolicyBuilder_ == null) {
        result.retryPolicy_ = retryPolicy_;
      } else {
        result.retryPolicy_ = retryPolicyBuilder_.build();
      }
      if (consumeBackoffPolicyBuilder_ == null) {
        result.consumeBackoffPolicy_ = consumeBackoffPolicy_;
      } else {
        result.consumeBackoffPolicy_ = consumeBackoffPolicyBuilder_.build();
      }
      result.maxReceiveBatchSize_ = maxReceiveBatchSize_;
      result.messagesPerTask_ = messagesPerTask_;
      if (cacheLimitsBuilder_ == null) {
        result.cacheLimits_ = cacheLimits_;
      } else {
        result.cacheLimits_ = cacheLimitsBuilder_.build();
      }
      result.consumeThreadCount_ = consumeThreadCount_;
      if (maxInvisibleDurationBuilder_ == null) {
        result.maxInvisibleDuration_ = maxInvisibleDuration_;
      } else {
        result.maxInvisibleDuration_ = maxInvisibleDurationBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof apache.rocketmq.v2.Subscription) {
        return mergeFrom((apache.rocketmq.v2.Subscription)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(apache.rocketmq.v2.Subscription other) {
      if (other == apache.rocketmq.v2.Subscription.getDefaultInstance()) return this;
      if (other.hasGroup()) {
        mergeGroup(other.getGroup());
      }
      if (subscriptionsBuilder_ == null) {
        if (!other.subscriptions_.isEmpty()) {
          if (subscriptions_.isEmpty()) {
            subscriptions_ = other.subscriptions_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureSubscriptionsIsMutable();
            subscriptions_.addAll(other.subscriptions_);
          }
          onChanged();
        }
      } else {
        if (!other.subscriptions_.isEmpty()) {
          if (subscriptionsBuilder_.isEmpty()) {
            subscriptionsBuilder_.dispose();
            subscriptionsBuilder_ = null;
            subscriptions_ = other.subscriptions_;
            bitField0_ = (bitField0_ & ~0x00000001);
            subscriptionsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSubscriptionsFieldBuilder() : null;
          } else {
            subscriptionsBuilder_.addAllMessages(other.subscriptions_);
          }
        }
      }
      if (other.hasDeadLetterPolicy()) {
        mergeDeadLetterPolicy(other.getDeadLetterPolicy());
      }
      if (other.consumeType_ != 0) {
        setConsumeTypeValue(other.getConsumeTypeValue());
      }
      if (other.getFifo() != false) {
        setFifo(other.getFifo());
      }
      if (other.hasRetryPolicy()) {
        mergeRetryPolicy(other.getRetryPolicy());
      }
      if (other.hasConsumeBackoffPolicy()) {
        mergeConsumeBackoffPolicy(other.getConsumeBackoffPolicy());
      }
      if (other.getMaxReceiveBatchSize() != 0) {
        setMaxReceiveBatchSize(other.getMaxReceiveBatchSize());
      }
      if (other.getMessagesPerTask() != 0) {
        setMessagesPerTask(other.getMessagesPerTask());
      }
      if (other.hasCacheLimits()) {
        mergeCacheLimits(other.getCacheLimits());
      }
      if (other.getConsumeThreadCount() != 0) {
        setConsumeThreadCount(other.getConsumeThreadCount());
      }
      if (other.hasMaxInvisibleDuration()) {
        mergeMaxInvisibleDuration(other.getMaxInvisibleDuration());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      apache.rocketmq.v2.Subscription parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (apache.rocketmq.v2.Subscription) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private apache.rocketmq.v2.Resource group_;
    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.Resource, apache.rocketmq.v2.Resource.Builder, apache.rocketmq.v2.ResourceOrBuilder> groupBuilder_;
    /**
     * <code>.apache.rocketmq.v2.Resource group = 1;</code>
     * @return Whether the group field is set.
     */
    public boolean hasGroup() {
      return groupBuilder_ != null || group_ != null;
    }
    /**
     * <code>.apache.rocketmq.v2.Resource group = 1;</code>
     * @return The group.
     */
    public apache.rocketmq.v2.Resource getGroup() {
      if (groupBuilder_ == null) {
        return group_ == null ? apache.rocketmq.v2.Resource.getDefaultInstance() : group_;
      } else {
        return groupBuilder_.getMessage();
      }
    }
    /**
     * <code>.apache.rocketmq.v2.Resource group = 1;</code>
     */
    public Builder setGroup(apache.rocketmq.v2.Resource value) {
      if (groupBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        group_ = value;
        onChanged();
      } else {
        groupBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.apache.rocketmq.v2.Resource group = 1;</code>
     */
    public Builder setGroup(
        apache.rocketmq.v2.Resource.Builder builderForValue) {
      if (groupBuilder_ == null) {
        group_ = builderForValue.build();
        onChanged();
      } else {
        groupBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.apache.rocketmq.v2.Resource group = 1;</code>
     */
    public Builder mergeGroup(apache.rocketmq.v2.Resource value) {
      if (groupBuilder_ == null) {
        if (group_ != null) {
          group_ =
            apache.rocketmq.v2.Resource.newBuilder(group_).mergeFrom(value).buildPartial();
        } else {
          group_ = value;
        }
        onChanged();
      } else {
        groupBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.apache.rocketmq.v2.Resource group = 1;</code>
     */
    public Builder clearGroup() {
      if (groupBuilder_ == null) {
        group_ = null;
        onChanged();
      } else {
        group_ = null;
        groupBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.apache.rocketmq.v2.Resource group = 1;</code>
     */
    public apache.rocketmq.v2.Resource.Builder getGroupBuilder() {
      
      onChanged();
      return getGroupFieldBuilder().getBuilder();
    }
    /**
     * <code>.apache.rocketmq.v2.Resource group = 1;</code>
     */
    public apache.rocketmq.v2.ResourceOrBuilder getGroupOrBuilder() {
      if (groupBuilder_ != null) {
        return groupBuilder_.getMessageOrBuilder();
      } else {
        return group_ == null ?
            apache.rocketmq.v2.Resource.getDefaultInstance() : group_;
      }
    }
    /**
     * <code>.apache.rocketmq.v2.Resource group = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.Resource, apache.rocketmq.v2.Resource.Builder, apache.rocketmq.v2.ResourceOrBuilder> 
        getGroupFieldBuilder() {
      if (groupBuilder_ == null) {
        groupBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            apache.rocketmq.v2.Resource, apache.rocketmq.v2.Resource.Builder, apache.rocketmq.v2.ResourceOrBuilder>(
                getGroup(),
                getParentForChildren(),
                isClean());
        group_ = null;
      }
      return groupBuilder_;
    }

    private java.util.List<apache.rocketmq.v2.SubscriptionEntry> subscriptions_ =
      java.util.Collections.emptyList();
    private void ensureSubscriptionsIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        subscriptions_ = new java.util.ArrayList<apache.rocketmq.v2.SubscriptionEntry>(subscriptions_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        apache.rocketmq.v2.SubscriptionEntry, apache.rocketmq.v2.SubscriptionEntry.Builder, apache.rocketmq.v2.SubscriptionEntryOrBuilder> subscriptionsBuilder_;

    /**
     * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
     */
    public java.util.List<apache.rocketmq.v2.SubscriptionEntry> getSubscriptionsList() {
      if (subscriptionsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(subscriptions_);
      } else {
        return subscriptionsBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
     */
    public int getSubscriptionsCount() {
      if (subscriptionsBuilder_ == null) {
        return subscriptions_.size();
      } else {
        return subscriptionsBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
     */
    public apache.rocketmq.v2.SubscriptionEntry getSubscriptions(int index) {
      if (subscriptionsBuilder_ == null) {
        return subscriptions_.get(index);
      } else {
        return subscriptionsBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
     */
    public Builder setSubscriptions(
        int index, apache.rocketmq.v2.SubscriptionEntry value) {
      if (subscriptionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSubscriptionsIsMutable();
        subscriptions_.set(index, value);
        onChanged();
      } else {
        subscriptionsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
     */
    public Builder setSubscriptions(
        int index, apache.rocketmq.v2.SubscriptionEntry.Builder builderForValue) {
      if (subscriptionsBuilder_ == null) {
        ensureSubscriptionsIsMutable();
        subscriptions_.set(index, builderForValue.build());
        onChanged();
      } else {
        subscriptionsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
     */
    public Builder addSubscriptions(apache.rocketmq.v2.SubscriptionEntry value) {
      if (subscriptionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSubscriptionsIsMutable();
        subscriptions_.add(value);
        onChanged();
      } else {
        subscriptionsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
     */
    public Builder addSubscriptions(
        int index, apache.rocketmq.v2.SubscriptionEntry value) {
      if (subscriptionsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSubscriptionsIsMutable();
        subscriptions_.add(index, value);
        onChanged();
      } else {
        subscriptionsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
     */
    public Builder addSubscriptions(
        apache.rocketmq.v2.SubscriptionEntry.Builder builderForValue) {
      if (subscriptionsBuilder_ == null) {
        ensureSubscriptionsIsMutable();
        subscriptions_.add(builderForValue.build());
        onChanged();
      } else {
        subscriptionsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
     */
    public Builder addSubscriptions(
        int index, apache.rocketmq.v2.SubscriptionEntry.Builder builderForValue) {
      if (subscriptionsBuilder_ == null) {
        ensureSubscriptionsIsMutable();
        subscriptions_.add(index, builderForValue.build());
        onChanged();
      } else {
        subscriptionsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
     */
    public Builder addAllSubscriptions(
        java.lang.Iterable<? extends apache.rocketmq.v2.SubscriptionEntry> values) {
      if (subscriptionsBuilder_ == null) {
        ensureSubscriptionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, subscriptions_);
        onChanged();
      } else {
        subscriptionsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
     */
    public Builder clearSubscriptions() {
      if (subscriptionsBuilder_ == null) {
        subscriptions_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        subscriptionsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
     */
    public Builder removeSubscriptions(int index) {
      if (subscriptionsBuilder_ == null) {
        ensureSubscriptionsIsMutable();
        subscriptions_.remove(index);
        onChanged();
      } else {
        subscriptionsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
     */
    public apache.rocketmq.v2.SubscriptionEntry.Builder getSubscriptionsBuilder(
        int index) {
      return getSubscriptionsFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
     */
    public apache.rocketmq.v2.SubscriptionEntryOrBuilder getSubscriptionsOrBuilder(
        int index) {
      if (subscriptionsBuilder_ == null) {
        return subscriptions_.get(index);  } else {
        return subscriptionsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
     */
    public java.util.List<? extends apache.rocketmq.v2.SubscriptionEntryOrBuilder> 
         getSubscriptionsOrBuilderList() {
      if (subscriptionsBuilder_ != null) {
        return subscriptionsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(subscriptions_);
      }
    }
    /**
     * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
     */
    public apache.rocketmq.v2.SubscriptionEntry.Builder addSubscriptionsBuilder() {
      return getSubscriptionsFieldBuilder().addBuilder(
          apache.rocketmq.v2.SubscriptionEntry.getDefaultInstance());
    }
    /**
     * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
     */
    public apache.rocketmq.v2.SubscriptionEntry.Builder addSubscriptionsBuilder(
        int index) {
      return getSubscriptionsFieldBuilder().addBuilder(
          index, apache.rocketmq.v2.SubscriptionEntry.getDefaultInstance());
    }
    /**
     * <code>repeated .apache.rocketmq.v2.SubscriptionEntry subscriptions = 2;</code>
     */
    public java.util.List<apache.rocketmq.v2.SubscriptionEntry.Builder> 
         getSubscriptionsBuilderList() {
      return getSubscriptionsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        apache.rocketmq.v2.SubscriptionEntry, apache.rocketmq.v2.SubscriptionEntry.Builder, apache.rocketmq.v2.SubscriptionEntryOrBuilder> 
        getSubscriptionsFieldBuilder() {
      if (subscriptionsBuilder_ == null) {
        subscriptionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            apache.rocketmq.v2.SubscriptionEntry, apache.rocketmq.v2.SubscriptionEntry.Builder, apache.rocketmq.v2.SubscriptionEntryOrBuilder>(
                subscriptions_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        subscriptions_ = null;
      }
      return subscriptionsBuilder_;
    }

    private apache.rocketmq.v2.DeadLetterPolicy deadLetterPolicy_;
    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.DeadLetterPolicy, apache.rocketmq.v2.DeadLetterPolicy.Builder, apache.rocketmq.v2.DeadLetterPolicyOrBuilder> deadLetterPolicyBuilder_;
    /**
     * <code>.apache.rocketmq.v2.DeadLetterPolicy dead_letter_policy = 3;</code>
     * @return Whether the deadLetterPolicy field is set.
     */
    public boolean hasDeadLetterPolicy() {
      return deadLetterPolicyBuilder_ != null || deadLetterPolicy_ != null;
    }
    /**
     * <code>.apache.rocketmq.v2.DeadLetterPolicy dead_letter_policy = 3;</code>
     * @return The deadLetterPolicy.
     */
    public apache.rocketmq.v2.DeadLetterPolicy getDeadLetterPolicy() {
      if (deadLetterPolicyBuilder_ == null) {
        return deadLetterPolicy_ == null ? apache.rocketmq.v2.DeadLetterPolicy.getDefaultInstance() : deadLetterPolicy_;
      } else {
        return deadLetterPolicyBuilder_.getMessage();
      }
    }
    /**
     * <code>.apache.rocketmq.v2.DeadLetterPolicy dead_letter_policy = 3;</code>
     */
    public Builder setDeadLetterPolicy(apache.rocketmq.v2.DeadLetterPolicy value) {
      if (deadLetterPolicyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        deadLetterPolicy_ = value;
        onChanged();
      } else {
        deadLetterPolicyBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.apache.rocketmq.v2.DeadLetterPolicy dead_letter_policy = 3;</code>
     */
    public Builder setDeadLetterPolicy(
        apache.rocketmq.v2.DeadLetterPolicy.Builder builderForValue) {
      if (deadLetterPolicyBuilder_ == null) {
        deadLetterPolicy_ = builderForValue.build();
        onChanged();
      } else {
        deadLetterPolicyBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.apache.rocketmq.v2.DeadLetterPolicy dead_letter_policy = 3;</code>
     */
    public Builder mergeDeadLetterPolicy(apache.rocketmq.v2.DeadLetterPolicy value) {
      if (deadLetterPolicyBuilder_ == null) {
        if (deadLetterPolicy_ != null) {
          deadLetterPolicy_ =
            apache.rocketmq.v2.DeadLetterPolicy.newBuilder(deadLetterPolicy_).mergeFrom(value).buildPartial();
        } else {
          deadLetterPolicy_ = value;
        }
        onChanged();
      } else {
        deadLetterPolicyBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.apache.rocketmq.v2.DeadLetterPolicy dead_letter_policy = 3;</code>
     */
    public Builder clearDeadLetterPolicy() {
      if (deadLetterPolicyBuilder_ == null) {
        deadLetterPolicy_ = null;
        onChanged();
      } else {
        deadLetterPolicy_ = null;
        deadLetterPolicyBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.apache.rocketmq.v2.DeadLetterPolicy dead_letter_policy = 3;</code>
     */
    public apache.rocketmq.v2.DeadLetterPolicy.Builder getDeadLetterPolicyBuilder() {
      
      onChanged();
      return getDeadLetterPolicyFieldBuilder().getBuilder();
    }
    /**
     * <code>.apache.rocketmq.v2.DeadLetterPolicy dead_letter_policy = 3;</code>
     */
    public apache.rocketmq.v2.DeadLetterPolicyOrBuilder getDeadLetterPolicyOrBuilder() {
      if (deadLetterPolicyBuilder_ != null) {
        return deadLetterPolicyBuilder_.getMessageOrBuilder();
      } else {
        return deadLetterPolicy_ == null ?
            apache.rocketmq.v2.DeadLetterPolicy.getDefaultInstance() : deadLetterPolicy_;
      }
    }
    /**
     * <code>.apache.rocketmq.v2.DeadLetterPolicy dead_letter_policy = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.DeadLetterPolicy, apache.rocketmq.v2.DeadLetterPolicy.Builder, apache.rocketmq.v2.DeadLetterPolicyOrBuilder> 
        getDeadLetterPolicyFieldBuilder() {
      if (deadLetterPolicyBuilder_ == null) {
        deadLetterPolicyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            apache.rocketmq.v2.DeadLetterPolicy, apache.rocketmq.v2.DeadLetterPolicy.Builder, apache.rocketmq.v2.DeadLetterPolicyOrBuilder>(
                getDeadLetterPolicy(),
                getParentForChildren(),
                isClean());
        deadLetterPolicy_ = null;
      }
      return deadLetterPolicyBuilder_;
    }

    private int consumeType_ = 0;
    /**
     * <code>.apache.rocketmq.v2.ConsumeMessageType consume_type = 4;</code>
     * @return The enum numeric value on the wire for consumeType.
     */
    @java.lang.Override public int getConsumeTypeValue() {
      return consumeType_;
    }
    /**
     * <code>.apache.rocketmq.v2.ConsumeMessageType consume_type = 4;</code>
     * @param value The enum numeric value on the wire for consumeType to set.
     * @return This builder for chaining.
     */
    public Builder setConsumeTypeValue(int value) {
      
      consumeType_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>.apache.rocketmq.v2.ConsumeMessageType consume_type = 4;</code>
     * @return The consumeType.
     */
    @java.lang.Override
    public apache.rocketmq.v2.ConsumeMessageType getConsumeType() {
      @SuppressWarnings("deprecation")
      apache.rocketmq.v2.ConsumeMessageType result = apache.rocketmq.v2.ConsumeMessageType.valueOf(consumeType_);
      return result == null ? apache.rocketmq.v2.ConsumeMessageType.UNRECOGNIZED : result;
    }
    /**
     * <code>.apache.rocketmq.v2.ConsumeMessageType consume_type = 4;</code>
     * @param value The consumeType to set.
     * @return This builder for chaining.
     */
    public Builder setConsumeType(apache.rocketmq.v2.ConsumeMessageType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      consumeType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.apache.rocketmq.v2.ConsumeMessageType consume_type = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearConsumeType() {
      
      consumeType_ = 0;
      onChanged();
      return this;
    }

    private boolean fifo_ ;
    /**
     * <code>bool fifo = 5;</code>
     * @return The fifo.
     */
    @java.lang.Override
    public boolean getFifo() {
      return fifo_;
    }
    /**
     * <code>bool fifo = 5;</code>
     * @param value The fifo to set.
     * @return This builder for chaining.
     */
    public Builder setFifo(boolean value) {
      
      fifo_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bool fifo = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearFifo() {
      
      fifo_ = false;
      onChanged();
      return this;
    }

    private apache.rocketmq.v2.RetryPolicy retryPolicy_;
    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.RetryPolicy, apache.rocketmq.v2.RetryPolicy.Builder, apache.rocketmq.v2.RetryPolicyOrBuilder> retryPolicyBuilder_;
    /**
     * <pre>
     * For RPC
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RetryPolicy retry_policy = 6;</code>
     * @return Whether the retryPolicy field is set.
     */
    public boolean hasRetryPolicy() {
      return retryPolicyBuilder_ != null || retryPolicy_ != null;
    }
    /**
     * <pre>
     * For RPC
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RetryPolicy retry_policy = 6;</code>
     * @return The retryPolicy.
     */
    public apache.rocketmq.v2.RetryPolicy getRetryPolicy() {
      if (retryPolicyBuilder_ == null) {
        return retryPolicy_ == null ? apache.rocketmq.v2.RetryPolicy.getDefaultInstance() : retryPolicy_;
      } else {
        return retryPolicyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * For RPC
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RetryPolicy retry_policy = 6;</code>
     */
    public Builder setRetryPolicy(apache.rocketmq.v2.RetryPolicy value) {
      if (retryPolicyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        retryPolicy_ = value;
        onChanged();
      } else {
        retryPolicyBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * For RPC
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RetryPolicy retry_policy = 6;</code>
     */
    public Builder setRetryPolicy(
        apache.rocketmq.v2.RetryPolicy.Builder builderForValue) {
      if (retryPolicyBuilder_ == null) {
        retryPolicy_ = builderForValue.build();
        onChanged();
      } else {
        retryPolicyBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * For RPC
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RetryPolicy retry_policy = 6;</code>
     */
    public Builder mergeRetryPolicy(apache.rocketmq.v2.RetryPolicy value) {
      if (retryPolicyBuilder_ == null) {
        if (retryPolicy_ != null) {
          retryPolicy_ =
            apache.rocketmq.v2.RetryPolicy.newBuilder(retryPolicy_).mergeFrom(value).buildPartial();
        } else {
          retryPolicy_ = value;
        }
        onChanged();
      } else {
        retryPolicyBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * For RPC
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RetryPolicy retry_policy = 6;</code>
     */
    public Builder clearRetryPolicy() {
      if (retryPolicyBuilder_ == null) {
        retryPolicy_ = null;
        onChanged();
      } else {
        retryPolicy_ = null;
        retryPolicyBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * For RPC
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RetryPolicy retry_policy = 6;</code>
     */
    public apache.rocketmq.v2.RetryPolicy.Builder getRetryPolicyBuilder() {
      
      onChanged();
      return getRetryPolicyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * For RPC
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RetryPolicy retry_policy = 6;</code>
     */
    public apache.rocketmq.v2.RetryPolicyOrBuilder getRetryPolicyOrBuilder() {
      if (retryPolicyBuilder_ != null) {
        return retryPolicyBuilder_.getMessageOrBuilder();
      } else {
        return retryPolicy_ == null ?
            apache.rocketmq.v2.RetryPolicy.getDefaultInstance() : retryPolicy_;
      }
    }
    /**
     * <pre>
     * For RPC
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RetryPolicy retry_policy = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.RetryPolicy, apache.rocketmq.v2.RetryPolicy.Builder, apache.rocketmq.v2.RetryPolicyOrBuilder> 
        getRetryPolicyFieldBuilder() {
      if (retryPolicyBuilder_ == null) {
        retryPolicyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            apache.rocketmq.v2.RetryPolicy, apache.rocketmq.v2.RetryPolicy.Builder, apache.rocketmq.v2.RetryPolicyOrBuilder>(
                getRetryPolicy(),
                getParentForChildren(),
                isClean());
        retryPolicy_ = null;
      }
      return retryPolicyBuilder_;
    }

    private apache.rocketmq.v2.RetryPolicy consumeBackoffPolicy_;
    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.RetryPolicy, apache.rocketmq.v2.RetryPolicy.Builder, apache.rocketmq.v2.RetryPolicyOrBuilder> consumeBackoffPolicyBuilder_;
    /**
     * <pre>
     * For PushConsumer
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RetryPolicy consume_backoff_policy = 7;</code>
     * @return Whether the consumeBackoffPolicy field is set.
     */
    public boolean hasConsumeBackoffPolicy() {
      return consumeBackoffPolicyBuilder_ != null || consumeBackoffPolicy_ != null;
    }
    /**
     * <pre>
     * For PushConsumer
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RetryPolicy consume_backoff_policy = 7;</code>
     * @return The consumeBackoffPolicy.
     */
    public apache.rocketmq.v2.RetryPolicy getConsumeBackoffPolicy() {
      if (consumeBackoffPolicyBuilder_ == null) {
        return consumeBackoffPolicy_ == null ? apache.rocketmq.v2.RetryPolicy.getDefaultInstance() : consumeBackoffPolicy_;
      } else {
        return consumeBackoffPolicyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * For PushConsumer
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RetryPolicy consume_backoff_policy = 7;</code>
     */
    public Builder setConsumeBackoffPolicy(apache.rocketmq.v2.RetryPolicy value) {
      if (consumeBackoffPolicyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        consumeBackoffPolicy_ = value;
        onChanged();
      } else {
        consumeBackoffPolicyBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * For PushConsumer
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RetryPolicy consume_backoff_policy = 7;</code>
     */
    public Builder setConsumeBackoffPolicy(
        apache.rocketmq.v2.RetryPolicy.Builder builderForValue) {
      if (consumeBackoffPolicyBuilder_ == null) {
        consumeBackoffPolicy_ = builderForValue.build();
        onChanged();
      } else {
        consumeBackoffPolicyBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * For PushConsumer
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RetryPolicy consume_backoff_policy = 7;</code>
     */
    public Builder mergeConsumeBackoffPolicy(apache.rocketmq.v2.RetryPolicy value) {
      if (consumeBackoffPolicyBuilder_ == null) {
        if (consumeBackoffPolicy_ != null) {
          consumeBackoffPolicy_ =
            apache.rocketmq.v2.RetryPolicy.newBuilder(consumeBackoffPolicy_).mergeFrom(value).buildPartial();
        } else {
          consumeBackoffPolicy_ = value;
        }
        onChanged();
      } else {
        consumeBackoffPolicyBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * For PushConsumer
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RetryPolicy consume_backoff_policy = 7;</code>
     */
    public Builder clearConsumeBackoffPolicy() {
      if (consumeBackoffPolicyBuilder_ == null) {
        consumeBackoffPolicy_ = null;
        onChanged();
      } else {
        consumeBackoffPolicy_ = null;
        consumeBackoffPolicyBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * For PushConsumer
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RetryPolicy consume_backoff_policy = 7;</code>
     */
    public apache.rocketmq.v2.RetryPolicy.Builder getConsumeBackoffPolicyBuilder() {
      
      onChanged();
      return getConsumeBackoffPolicyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * For PushConsumer
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RetryPolicy consume_backoff_policy = 7;</code>
     */
    public apache.rocketmq.v2.RetryPolicyOrBuilder getConsumeBackoffPolicyOrBuilder() {
      if (consumeBackoffPolicyBuilder_ != null) {
        return consumeBackoffPolicyBuilder_.getMessageOrBuilder();
      } else {
        return consumeBackoffPolicy_ == null ?
            apache.rocketmq.v2.RetryPolicy.getDefaultInstance() : consumeBackoffPolicy_;
      }
    }
    /**
     * <pre>
     * For PushConsumer
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RetryPolicy consume_backoff_policy = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.RetryPolicy, apache.rocketmq.v2.RetryPolicy.Builder, apache.rocketmq.v2.RetryPolicyOrBuilder> 
        getConsumeBackoffPolicyFieldBuilder() {
      if (consumeBackoffPolicyBuilder_ == null) {
        consumeBackoffPolicyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            apache.rocketmq.v2.RetryPolicy, apache.rocketmq.v2.RetryPolicy.Builder, apache.rocketmq.v2.RetryPolicyOrBuilder>(
                getConsumeBackoffPolicy(),
                getParentForChildren(),
                isClean());
        consumeBackoffPolicy_ = null;
      }
      return consumeBackoffPolicyBuilder_;
    }

    private int maxReceiveBatchSize_ ;
    /**
     * <code>int32 max_receive_batch_size = 8;</code>
     * @return The maxReceiveBatchSize.
     */
    @java.lang.Override
    public int getMaxReceiveBatchSize() {
      return maxReceiveBatchSize_;
    }
    /**
     * <code>int32 max_receive_batch_size = 8;</code>
     * @param value The maxReceiveBatchSize to set.
     * @return This builder for chaining.
     */
    public Builder setMaxReceiveBatchSize(int value) {
      
      maxReceiveBatchSize_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 max_receive_batch_size = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearMaxReceiveBatchSize() {
      
      maxReceiveBatchSize_ = 0;
      onChanged();
      return this;
    }

    private int messagesPerTask_ ;
    /**
     * <pre>
     * After messages are received from servers, consumers normally split them
     * into multiple mini-batches. Each mini-batch is assigned to a dedicated
     * task, which will be submitted to thread-pool to run concurrently.
     * </pre>
     *
     * <code>int32 messages_per_task = 9;</code>
     * @return The messagesPerTask.
     */
    @java.lang.Override
    public int getMessagesPerTask() {
      return messagesPerTask_;
    }
    /**
     * <pre>
     * After messages are received from servers, consumers normally split them
     * into multiple mini-batches. Each mini-batch is assigned to a dedicated
     * task, which will be submitted to thread-pool to run concurrently.
     * </pre>
     *
     * <code>int32 messages_per_task = 9;</code>
     * @param value The messagesPerTask to set.
     * @return This builder for chaining.
     */
    public Builder setMessagesPerTask(int value) {
      
      messagesPerTask_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * After messages are received from servers, consumers normally split them
     * into multiple mini-batches. Each mini-batch is assigned to a dedicated
     * task, which will be submitted to thread-pool to run concurrently.
     * </pre>
     *
     * <code>int32 messages_per_task = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearMessagesPerTask() {
      
      messagesPerTask_ = 0;
      onChanged();
      return this;
    }

    private apache.rocketmq.v2.CacheLimits cacheLimits_;
    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.CacheLimits, apache.rocketmq.v2.CacheLimits.Builder, apache.rocketmq.v2.CacheLimitsOrBuilder> cacheLimitsBuilder_;
    /**
     * <code>.apache.rocketmq.v2.CacheLimits cache_limits = 10;</code>
     * @return Whether the cacheLimits field is set.
     */
    public boolean hasCacheLimits() {
      return cacheLimitsBuilder_ != null || cacheLimits_ != null;
    }
    /**
     * <code>.apache.rocketmq.v2.CacheLimits cache_limits = 10;</code>
     * @return The cacheLimits.
     */
    public apache.rocketmq.v2.CacheLimits getCacheLimits() {
      if (cacheLimitsBuilder_ == null) {
        return cacheLimits_ == null ? apache.rocketmq.v2.CacheLimits.getDefaultInstance() : cacheLimits_;
      } else {
        return cacheLimitsBuilder_.getMessage();
      }
    }
    /**
     * <code>.apache.rocketmq.v2.CacheLimits cache_limits = 10;</code>
     */
    public Builder setCacheLimits(apache.rocketmq.v2.CacheLimits value) {
      if (cacheLimitsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        cacheLimits_ = value;
        onChanged();
      } else {
        cacheLimitsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <code>.apache.rocketmq.v2.CacheLimits cache_limits = 10;</code>
     */
    public Builder setCacheLimits(
        apache.rocketmq.v2.CacheLimits.Builder builderForValue) {
      if (cacheLimitsBuilder_ == null) {
        cacheLimits_ = builderForValue.build();
        onChanged();
      } else {
        cacheLimitsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <code>.apache.rocketmq.v2.CacheLimits cache_limits = 10;</code>
     */
    public Builder mergeCacheLimits(apache.rocketmq.v2.CacheLimits value) {
      if (cacheLimitsBuilder_ == null) {
        if (cacheLimits_ != null) {
          cacheLimits_ =
            apache.rocketmq.v2.CacheLimits.newBuilder(cacheLimits_).mergeFrom(value).buildPartial();
        } else {
          cacheLimits_ = value;
        }
        onChanged();
      } else {
        cacheLimitsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <code>.apache.rocketmq.v2.CacheLimits cache_limits = 10;</code>
     */
    public Builder clearCacheLimits() {
      if (cacheLimitsBuilder_ == null) {
        cacheLimits_ = null;
        onChanged();
      } else {
        cacheLimits_ = null;
        cacheLimitsBuilder_ = null;
      }

      return this;
    }
    /**
     * <code>.apache.rocketmq.v2.CacheLimits cache_limits = 10;</code>
     */
    public apache.rocketmq.v2.CacheLimits.Builder getCacheLimitsBuilder() {
      
      onChanged();
      return getCacheLimitsFieldBuilder().getBuilder();
    }
    /**
     * <code>.apache.rocketmq.v2.CacheLimits cache_limits = 10;</code>
     */
    public apache.rocketmq.v2.CacheLimitsOrBuilder getCacheLimitsOrBuilder() {
      if (cacheLimitsBuilder_ != null) {
        return cacheLimitsBuilder_.getMessageOrBuilder();
      } else {
        return cacheLimits_ == null ?
            apache.rocketmq.v2.CacheLimits.getDefaultInstance() : cacheLimits_;
      }
    }
    /**
     * <code>.apache.rocketmq.v2.CacheLimits cache_limits = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.CacheLimits, apache.rocketmq.v2.CacheLimits.Builder, apache.rocketmq.v2.CacheLimitsOrBuilder> 
        getCacheLimitsFieldBuilder() {
      if (cacheLimitsBuilder_ == null) {
        cacheLimitsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            apache.rocketmq.v2.CacheLimits, apache.rocketmq.v2.CacheLimits.Builder, apache.rocketmq.v2.CacheLimitsOrBuilder>(
                getCacheLimits(),
                getParentForChildren(),
                isClean());
        cacheLimits_ = null;
      }
      return cacheLimitsBuilder_;
    }

    private int consumeThreadCount_ ;
    /**
     * <code>int32 consume_thread_count = 11;</code>
     * @return The consumeThreadCount.
     */
    @java.lang.Override
    public int getConsumeThreadCount() {
      return consumeThreadCount_;
    }
    /**
     * <code>int32 consume_thread_count = 11;</code>
     * @param value The consumeThreadCount to set.
     * @return This builder for chaining.
     */
    public Builder setConsumeThreadCount(int value) {
      
      consumeThreadCount_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>int32 consume_thread_count = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearConsumeThreadCount() {
      
      consumeThreadCount_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.Duration maxInvisibleDuration_;
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> maxInvisibleDurationBuilder_;
    /**
     * <pre>
     * Up to server
     * </pre>
     *
     * <code>.google.protobuf.Duration max_invisible_duration = 12;</code>
     * @return Whether the maxInvisibleDuration field is set.
     */
    public boolean hasMaxInvisibleDuration() {
      return maxInvisibleDurationBuilder_ != null || maxInvisibleDuration_ != null;
    }
    /**
     * <pre>
     * Up to server
     * </pre>
     *
     * <code>.google.protobuf.Duration max_invisible_duration = 12;</code>
     * @return The maxInvisibleDuration.
     */
    public com.google.protobuf.Duration getMaxInvisibleDuration() {
      if (maxInvisibleDurationBuilder_ == null) {
        return maxInvisibleDuration_ == null ? com.google.protobuf.Duration.getDefaultInstance() : maxInvisibleDuration_;
      } else {
        return maxInvisibleDurationBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Up to server
     * </pre>
     *
     * <code>.google.protobuf.Duration max_invisible_duration = 12;</code>
     */
    public Builder setMaxInvisibleDuration(com.google.protobuf.Duration value) {
      if (maxInvisibleDurationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        maxInvisibleDuration_ = value;
        onChanged();
      } else {
        maxInvisibleDurationBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Up to server
     * </pre>
     *
     * <code>.google.protobuf.Duration max_invisible_duration = 12;</code>
     */
    public Builder setMaxInvisibleDuration(
        com.google.protobuf.Duration.Builder builderForValue) {
      if (maxInvisibleDurationBuilder_ == null) {
        maxInvisibleDuration_ = builderForValue.build();
        onChanged();
      } else {
        maxInvisibleDurationBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Up to server
     * </pre>
     *
     * <code>.google.protobuf.Duration max_invisible_duration = 12;</code>
     */
    public Builder mergeMaxInvisibleDuration(com.google.protobuf.Duration value) {
      if (maxInvisibleDurationBuilder_ == null) {
        if (maxInvisibleDuration_ != null) {
          maxInvisibleDuration_ =
            com.google.protobuf.Duration.newBuilder(maxInvisibleDuration_).mergeFrom(value).buildPartial();
        } else {
          maxInvisibleDuration_ = value;
        }
        onChanged();
      } else {
        maxInvisibleDurationBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Up to server
     * </pre>
     *
     * <code>.google.protobuf.Duration max_invisible_duration = 12;</code>
     */
    public Builder clearMaxInvisibleDuration() {
      if (maxInvisibleDurationBuilder_ == null) {
        maxInvisibleDuration_ = null;
        onChanged();
      } else {
        maxInvisibleDuration_ = null;
        maxInvisibleDurationBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Up to server
     * </pre>
     *
     * <code>.google.protobuf.Duration max_invisible_duration = 12;</code>
     */
    public com.google.protobuf.Duration.Builder getMaxInvisibleDurationBuilder() {
      
      onChanged();
      return getMaxInvisibleDurationFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Up to server
     * </pre>
     *
     * <code>.google.protobuf.Duration max_invisible_duration = 12;</code>
     */
    public com.google.protobuf.DurationOrBuilder getMaxInvisibleDurationOrBuilder() {
      if (maxInvisibleDurationBuilder_ != null) {
        return maxInvisibleDurationBuilder_.getMessageOrBuilder();
      } else {
        return maxInvisibleDuration_ == null ?
            com.google.protobuf.Duration.getDefaultInstance() : maxInvisibleDuration_;
      }
    }
    /**
     * <pre>
     * Up to server
     * </pre>
     *
     * <code>.google.protobuf.Duration max_invisible_duration = 12;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder> 
        getMaxInvisibleDurationFieldBuilder() {
      if (maxInvisibleDurationBuilder_ == null) {
        maxInvisibleDurationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            com.google.protobuf.Duration, com.google.protobuf.Duration.Builder, com.google.protobuf.DurationOrBuilder>(
                getMaxInvisibleDuration(),
                getParentForChildren(),
                isClean());
        maxInvisibleDuration_ = null;
      }
      return maxInvisibleDurationBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:apache.rocketmq.v2.Subscription)
  }

  // @@protoc_insertion_point(class_scope:apache.rocketmq.v2.Subscription)
  private static final apache.rocketmq.v2.Subscription DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new apache.rocketmq.v2.Subscription();
  }

  public static apache.rocketmq.v2.Subscription getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Subscription>
      PARSER = new com.google.protobuf.AbstractParser<Subscription>() {
    @java.lang.Override
    public Subscription parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Subscription(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Subscription> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Subscription> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public apache.rocketmq.v2.Subscription getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

