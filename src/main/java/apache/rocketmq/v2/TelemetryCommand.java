// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apache/rocketmq/v2/service.proto

package apache.rocketmq.v2;

/**
 * Protobuf type {@code apache.rocketmq.v2.TelemetryCommand}
 */
public final class TelemetryCommand extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:apache.rocketmq.v2.TelemetryCommand)
    TelemetryCommandOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TelemetryCommand.newBuilder() to construct.
  private TelemetryCommand(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TelemetryCommand() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new TelemetryCommand();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private TelemetryCommand(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            apache.rocketmq.v2.ReportActiveSettingsCommand.Builder subBuilder = null;
            if (commandCase_ == 1) {
              subBuilder = ((apache.rocketmq.v2.ReportActiveSettingsCommand) command_).toBuilder();
            }
            command_ =
                input.readMessage(apache.rocketmq.v2.ReportActiveSettingsCommand.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((apache.rocketmq.v2.ReportActiveSettingsCommand) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 1;
            break;
          }
          case 18: {
            apache.rocketmq.v2.ApplyPassiveSettingsResult.Builder subBuilder = null;
            if (commandCase_ == 2) {
              subBuilder = ((apache.rocketmq.v2.ApplyPassiveSettingsResult) command_).toBuilder();
            }
            command_ =
                input.readMessage(apache.rocketmq.v2.ApplyPassiveSettingsResult.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((apache.rocketmq.v2.ApplyPassiveSettingsResult) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 2;
            break;
          }
          case 26: {
            apache.rocketmq.v2.ThreadStackTrace.Builder subBuilder = null;
            if (commandCase_ == 3) {
              subBuilder = ((apache.rocketmq.v2.ThreadStackTrace) command_).toBuilder();
            }
            command_ =
                input.readMessage(apache.rocketmq.v2.ThreadStackTrace.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((apache.rocketmq.v2.ThreadStackTrace) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 3;
            break;
          }
          case 34: {
            apache.rocketmq.v2.VerifyMessageResult.Builder subBuilder = null;
            if (commandCase_ == 4) {
              subBuilder = ((apache.rocketmq.v2.VerifyMessageResult) command_).toBuilder();
            }
            command_ =
                input.readMessage(apache.rocketmq.v2.VerifyMessageResult.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((apache.rocketmq.v2.VerifyMessageResult) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 4;
            break;
          }
          case 42: {
            apache.rocketmq.v2.ApplyPassiveSettingsCommand.Builder subBuilder = null;
            if (commandCase_ == 5) {
              subBuilder = ((apache.rocketmq.v2.ApplyPassiveSettingsCommand) command_).toBuilder();
            }
            command_ =
                input.readMessage(apache.rocketmq.v2.ApplyPassiveSettingsCommand.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((apache.rocketmq.v2.ApplyPassiveSettingsCommand) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 5;
            break;
          }
          case 50: {
            apache.rocketmq.v2.ReportActiveSettingsResult.Builder subBuilder = null;
            if (commandCase_ == 6) {
              subBuilder = ((apache.rocketmq.v2.ReportActiveSettingsResult) command_).toBuilder();
            }
            command_ =
                input.readMessage(apache.rocketmq.v2.ReportActiveSettingsResult.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((apache.rocketmq.v2.ReportActiveSettingsResult) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 6;
            break;
          }
          case 58: {
            apache.rocketmq.v2.RecoverOrphanedTransactionCommand.Builder subBuilder = null;
            if (commandCase_ == 7) {
              subBuilder = ((apache.rocketmq.v2.RecoverOrphanedTransactionCommand) command_).toBuilder();
            }
            command_ =
                input.readMessage(apache.rocketmq.v2.RecoverOrphanedTransactionCommand.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((apache.rocketmq.v2.RecoverOrphanedTransactionCommand) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 7;
            break;
          }
          case 66: {
            apache.rocketmq.v2.PrintThreadStackTraceCommand.Builder subBuilder = null;
            if (commandCase_ == 8) {
              subBuilder = ((apache.rocketmq.v2.PrintThreadStackTraceCommand) command_).toBuilder();
            }
            command_ =
                input.readMessage(apache.rocketmq.v2.PrintThreadStackTraceCommand.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((apache.rocketmq.v2.PrintThreadStackTraceCommand) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 8;
            break;
          }
          case 74: {
            apache.rocketmq.v2.VerifyMessageCommand.Builder subBuilder = null;
            if (commandCase_ == 9) {
              subBuilder = ((apache.rocketmq.v2.VerifyMessageCommand) command_).toBuilder();
            }
            command_ =
                input.readMessage(apache.rocketmq.v2.VerifyMessageCommand.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((apache.rocketmq.v2.VerifyMessageCommand) command_);
              command_ = subBuilder.buildPartial();
            }
            commandCase_ = 9;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return apache.rocketmq.v2.MQService.internal_static_apache_rocketmq_v2_TelemetryCommand_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return apache.rocketmq.v2.MQService.internal_static_apache_rocketmq_v2_TelemetryCommand_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            apache.rocketmq.v2.TelemetryCommand.class, apache.rocketmq.v2.TelemetryCommand.Builder.class);
  }

  private int commandCase_ = 0;
  private java.lang.Object command_;
  public enum CommandCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    REPORT_ACTIVE_SETTINGS_COMMAND(1),
    APPLY_PASSIVE_SETTINGS_RESULT(2),
    THREAD_STACK_TRACE(3),
    VERIFY_MESSAGE_RESULT(4),
    APPLY_PASSIVE_SETTINGS_COMMAND(5),
    REPORT_ACTIVE_SETTINGS_RESULT(6),
    RECOVER_ORPHANED_TRANSACTION_COMMAND(7),
    PRINT_THREAD_STACK_TRACE_COMMAND(8),
    VERIFY_MESSAGE_COMMAND(9),
    COMMAND_NOT_SET(0);
    private final int value;
    private CommandCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CommandCase valueOf(int value) {
      return forNumber(value);
    }

    public static CommandCase forNumber(int value) {
      switch (value) {
        case 1: return REPORT_ACTIVE_SETTINGS_COMMAND;
        case 2: return APPLY_PASSIVE_SETTINGS_RESULT;
        case 3: return THREAD_STACK_TRACE;
        case 4: return VERIFY_MESSAGE_RESULT;
        case 5: return APPLY_PASSIVE_SETTINGS_COMMAND;
        case 6: return REPORT_ACTIVE_SETTINGS_RESULT;
        case 7: return RECOVER_ORPHANED_TRANSACTION_COMMAND;
        case 8: return PRINT_THREAD_STACK_TRACE_COMMAND;
        case 9: return VERIFY_MESSAGE_COMMAND;
        case 0: return COMMAND_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public CommandCase
  getCommandCase() {
    return CommandCase.forNumber(
        commandCase_);
  }

  public static final int REPORT_ACTIVE_SETTINGS_COMMAND_FIELD_NUMBER = 1;
  /**
   * <pre>
   * These messages are from client.
   * Report active setting to server.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.ReportActiveSettingsCommand report_active_settings_command = 1;</code>
   * @return Whether the reportActiveSettingsCommand field is set.
   */
  @java.lang.Override
  public boolean hasReportActiveSettingsCommand() {
    return commandCase_ == 1;
  }
  /**
   * <pre>
   * These messages are from client.
   * Report active setting to server.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.ReportActiveSettingsCommand report_active_settings_command = 1;</code>
   * @return The reportActiveSettingsCommand.
   */
  @java.lang.Override
  public apache.rocketmq.v2.ReportActiveSettingsCommand getReportActiveSettingsCommand() {
    if (commandCase_ == 1) {
       return (apache.rocketmq.v2.ReportActiveSettingsCommand) command_;
    }
    return apache.rocketmq.v2.ReportActiveSettingsCommand.getDefaultInstance();
  }
  /**
   * <pre>
   * These messages are from client.
   * Report active setting to server.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.ReportActiveSettingsCommand report_active_settings_command = 1;</code>
   */
  @java.lang.Override
  public apache.rocketmq.v2.ReportActiveSettingsCommandOrBuilder getReportActiveSettingsCommandOrBuilder() {
    if (commandCase_ == 1) {
       return (apache.rocketmq.v2.ReportActiveSettingsCommand) command_;
    }
    return apache.rocketmq.v2.ReportActiveSettingsCommand.getDefaultInstance();
  }

  public static final int APPLY_PASSIVE_SETTINGS_RESULT_FIELD_NUMBER = 2;
  /**
   * <pre>
   * Ack `ApplyPassiveSettingsCommand` from server.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.ApplyPassiveSettingsResult apply_passive_settings_result = 2;</code>
   * @return Whether the applyPassiveSettingsResult field is set.
   */
  @java.lang.Override
  public boolean hasApplyPassiveSettingsResult() {
    return commandCase_ == 2;
  }
  /**
   * <pre>
   * Ack `ApplyPassiveSettingsCommand` from server.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.ApplyPassiveSettingsResult apply_passive_settings_result = 2;</code>
   * @return The applyPassiveSettingsResult.
   */
  @java.lang.Override
  public apache.rocketmq.v2.ApplyPassiveSettingsResult getApplyPassiveSettingsResult() {
    if (commandCase_ == 2) {
       return (apache.rocketmq.v2.ApplyPassiveSettingsResult) command_;
    }
    return apache.rocketmq.v2.ApplyPassiveSettingsResult.getDefaultInstance();
  }
  /**
   * <pre>
   * Ack `ApplyPassiveSettingsCommand` from server.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.ApplyPassiveSettingsResult apply_passive_settings_result = 2;</code>
   */
  @java.lang.Override
  public apache.rocketmq.v2.ApplyPassiveSettingsResultOrBuilder getApplyPassiveSettingsResultOrBuilder() {
    if (commandCase_ == 2) {
       return (apache.rocketmq.v2.ApplyPassiveSettingsResult) command_;
    }
    return apache.rocketmq.v2.ApplyPassiveSettingsResult.getDefaultInstance();
  }

  public static final int THREAD_STACK_TRACE_FIELD_NUMBER = 3;
  /**
   * <pre>
   * Report thread stack trace to server.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.ThreadStackTrace thread_stack_trace = 3;</code>
   * @return Whether the threadStackTrace field is set.
   */
  @java.lang.Override
  public boolean hasThreadStackTrace() {
    return commandCase_ == 3;
  }
  /**
   * <pre>
   * Report thread stack trace to server.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.ThreadStackTrace thread_stack_trace = 3;</code>
   * @return The threadStackTrace.
   */
  @java.lang.Override
  public apache.rocketmq.v2.ThreadStackTrace getThreadStackTrace() {
    if (commandCase_ == 3) {
       return (apache.rocketmq.v2.ThreadStackTrace) command_;
    }
    return apache.rocketmq.v2.ThreadStackTrace.getDefaultInstance();
  }
  /**
   * <pre>
   * Report thread stack trace to server.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.ThreadStackTrace thread_stack_trace = 3;</code>
   */
  @java.lang.Override
  public apache.rocketmq.v2.ThreadStackTraceOrBuilder getThreadStackTraceOrBuilder() {
    if (commandCase_ == 3) {
       return (apache.rocketmq.v2.ThreadStackTrace) command_;
    }
    return apache.rocketmq.v2.ThreadStackTrace.getDefaultInstance();
  }

  public static final int VERIFY_MESSAGE_RESULT_FIELD_NUMBER = 4;
  /**
   * <pre>
   * Repost message verify result to server.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.VerifyMessageResult verify_message_result = 4;</code>
   * @return Whether the verifyMessageResult field is set.
   */
  @java.lang.Override
  public boolean hasVerifyMessageResult() {
    return commandCase_ == 4;
  }
  /**
   * <pre>
   * Repost message verify result to server.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.VerifyMessageResult verify_message_result = 4;</code>
   * @return The verifyMessageResult.
   */
  @java.lang.Override
  public apache.rocketmq.v2.VerifyMessageResult getVerifyMessageResult() {
    if (commandCase_ == 4) {
       return (apache.rocketmq.v2.VerifyMessageResult) command_;
    }
    return apache.rocketmq.v2.VerifyMessageResult.getDefaultInstance();
  }
  /**
   * <pre>
   * Repost message verify result to server.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.VerifyMessageResult verify_message_result = 4;</code>
   */
  @java.lang.Override
  public apache.rocketmq.v2.VerifyMessageResultOrBuilder getVerifyMessageResultOrBuilder() {
    if (commandCase_ == 4) {
       return (apache.rocketmq.v2.VerifyMessageResult) command_;
    }
    return apache.rocketmq.v2.VerifyMessageResult.getDefaultInstance();
  }

  public static final int APPLY_PASSIVE_SETTINGS_COMMAND_FIELD_NUMBER = 5;
  /**
   * <pre>
   * There messages are from server.
   * Deliver passive settings to client.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.ApplyPassiveSettingsCommand apply_passive_settings_command = 5;</code>
   * @return Whether the applyPassiveSettingsCommand field is set.
   */
  @java.lang.Override
  public boolean hasApplyPassiveSettingsCommand() {
    return commandCase_ == 5;
  }
  /**
   * <pre>
   * There messages are from server.
   * Deliver passive settings to client.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.ApplyPassiveSettingsCommand apply_passive_settings_command = 5;</code>
   * @return The applyPassiveSettingsCommand.
   */
  @java.lang.Override
  public apache.rocketmq.v2.ApplyPassiveSettingsCommand getApplyPassiveSettingsCommand() {
    if (commandCase_ == 5) {
       return (apache.rocketmq.v2.ApplyPassiveSettingsCommand) command_;
    }
    return apache.rocketmq.v2.ApplyPassiveSettingsCommand.getDefaultInstance();
  }
  /**
   * <pre>
   * There messages are from server.
   * Deliver passive settings to client.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.ApplyPassiveSettingsCommand apply_passive_settings_command = 5;</code>
   */
  @java.lang.Override
  public apache.rocketmq.v2.ApplyPassiveSettingsCommandOrBuilder getApplyPassiveSettingsCommandOrBuilder() {
    if (commandCase_ == 5) {
       return (apache.rocketmq.v2.ApplyPassiveSettingsCommand) command_;
    }
    return apache.rocketmq.v2.ApplyPassiveSettingsCommand.getDefaultInstance();
  }

  public static final int REPORT_ACTIVE_SETTINGS_RESULT_FIELD_NUMBER = 6;
  /**
   * <pre>
   * Ack `ReportActiveSettingsCommand` from client.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.ReportActiveSettingsResult report_active_settings_result = 6;</code>
   * @return Whether the reportActiveSettingsResult field is set.
   */
  @java.lang.Override
  public boolean hasReportActiveSettingsResult() {
    return commandCase_ == 6;
  }
  /**
   * <pre>
   * Ack `ReportActiveSettingsCommand` from client.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.ReportActiveSettingsResult report_active_settings_result = 6;</code>
   * @return The reportActiveSettingsResult.
   */
  @java.lang.Override
  public apache.rocketmq.v2.ReportActiveSettingsResult getReportActiveSettingsResult() {
    if (commandCase_ == 6) {
       return (apache.rocketmq.v2.ReportActiveSettingsResult) command_;
    }
    return apache.rocketmq.v2.ReportActiveSettingsResult.getDefaultInstance();
  }
  /**
   * <pre>
   * Ack `ReportActiveSettingsCommand` from client.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.ReportActiveSettingsResult report_active_settings_result = 6;</code>
   */
  @java.lang.Override
  public apache.rocketmq.v2.ReportActiveSettingsResultOrBuilder getReportActiveSettingsResultOrBuilder() {
    if (commandCase_ == 6) {
       return (apache.rocketmq.v2.ReportActiveSettingsResult) command_;
    }
    return apache.rocketmq.v2.ReportActiveSettingsResult.getDefaultInstance();
  }

  public static final int RECOVER_ORPHANED_TRANSACTION_COMMAND_FIELD_NUMBER = 7;
  /**
   * <pre>
   * Request client to recover the orphaned transaction message.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.RecoverOrphanedTransactionCommand recover_orphaned_transaction_command = 7;</code>
   * @return Whether the recoverOrphanedTransactionCommand field is set.
   */
  @java.lang.Override
  public boolean hasRecoverOrphanedTransactionCommand() {
    return commandCase_ == 7;
  }
  /**
   * <pre>
   * Request client to recover the orphaned transaction message.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.RecoverOrphanedTransactionCommand recover_orphaned_transaction_command = 7;</code>
   * @return The recoverOrphanedTransactionCommand.
   */
  @java.lang.Override
  public apache.rocketmq.v2.RecoverOrphanedTransactionCommand getRecoverOrphanedTransactionCommand() {
    if (commandCase_ == 7) {
       return (apache.rocketmq.v2.RecoverOrphanedTransactionCommand) command_;
    }
    return apache.rocketmq.v2.RecoverOrphanedTransactionCommand.getDefaultInstance();
  }
  /**
   * <pre>
   * Request client to recover the orphaned transaction message.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.RecoverOrphanedTransactionCommand recover_orphaned_transaction_command = 7;</code>
   */
  @java.lang.Override
  public apache.rocketmq.v2.RecoverOrphanedTransactionCommandOrBuilder getRecoverOrphanedTransactionCommandOrBuilder() {
    if (commandCase_ == 7) {
       return (apache.rocketmq.v2.RecoverOrphanedTransactionCommand) command_;
    }
    return apache.rocketmq.v2.RecoverOrphanedTransactionCommand.getDefaultInstance();
  }

  public static final int PRINT_THREAD_STACK_TRACE_COMMAND_FIELD_NUMBER = 8;
  /**
   * <pre>
   * Request client to print thread stack trace.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.PrintThreadStackTraceCommand print_thread_stack_trace_command = 8;</code>
   * @return Whether the printThreadStackTraceCommand field is set.
   */
  @java.lang.Override
  public boolean hasPrintThreadStackTraceCommand() {
    return commandCase_ == 8;
  }
  /**
   * <pre>
   * Request client to print thread stack trace.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.PrintThreadStackTraceCommand print_thread_stack_trace_command = 8;</code>
   * @return The printThreadStackTraceCommand.
   */
  @java.lang.Override
  public apache.rocketmq.v2.PrintThreadStackTraceCommand getPrintThreadStackTraceCommand() {
    if (commandCase_ == 8) {
       return (apache.rocketmq.v2.PrintThreadStackTraceCommand) command_;
    }
    return apache.rocketmq.v2.PrintThreadStackTraceCommand.getDefaultInstance();
  }
  /**
   * <pre>
   * Request client to print thread stack trace.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.PrintThreadStackTraceCommand print_thread_stack_trace_command = 8;</code>
   */
  @java.lang.Override
  public apache.rocketmq.v2.PrintThreadStackTraceCommandOrBuilder getPrintThreadStackTraceCommandOrBuilder() {
    if (commandCase_ == 8) {
       return (apache.rocketmq.v2.PrintThreadStackTraceCommand) command_;
    }
    return apache.rocketmq.v2.PrintThreadStackTraceCommand.getDefaultInstance();
  }

  public static final int VERIFY_MESSAGE_COMMAND_FIELD_NUMBER = 9;
  /**
   * <pre>
   * Request client to verify the consumption of the appointed message.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.VerifyMessageCommand verify_message_command = 9;</code>
   * @return Whether the verifyMessageCommand field is set.
   */
  @java.lang.Override
  public boolean hasVerifyMessageCommand() {
    return commandCase_ == 9;
  }
  /**
   * <pre>
   * Request client to verify the consumption of the appointed message.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.VerifyMessageCommand verify_message_command = 9;</code>
   * @return The verifyMessageCommand.
   */
  @java.lang.Override
  public apache.rocketmq.v2.VerifyMessageCommand getVerifyMessageCommand() {
    if (commandCase_ == 9) {
       return (apache.rocketmq.v2.VerifyMessageCommand) command_;
    }
    return apache.rocketmq.v2.VerifyMessageCommand.getDefaultInstance();
  }
  /**
   * <pre>
   * Request client to verify the consumption of the appointed message.
   * </pre>
   *
   * <code>.apache.rocketmq.v2.VerifyMessageCommand verify_message_command = 9;</code>
   */
  @java.lang.Override
  public apache.rocketmq.v2.VerifyMessageCommandOrBuilder getVerifyMessageCommandOrBuilder() {
    if (commandCase_ == 9) {
       return (apache.rocketmq.v2.VerifyMessageCommand) command_;
    }
    return apache.rocketmq.v2.VerifyMessageCommand.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (commandCase_ == 1) {
      output.writeMessage(1, (apache.rocketmq.v2.ReportActiveSettingsCommand) command_);
    }
    if (commandCase_ == 2) {
      output.writeMessage(2, (apache.rocketmq.v2.ApplyPassiveSettingsResult) command_);
    }
    if (commandCase_ == 3) {
      output.writeMessage(3, (apache.rocketmq.v2.ThreadStackTrace) command_);
    }
    if (commandCase_ == 4) {
      output.writeMessage(4, (apache.rocketmq.v2.VerifyMessageResult) command_);
    }
    if (commandCase_ == 5) {
      output.writeMessage(5, (apache.rocketmq.v2.ApplyPassiveSettingsCommand) command_);
    }
    if (commandCase_ == 6) {
      output.writeMessage(6, (apache.rocketmq.v2.ReportActiveSettingsResult) command_);
    }
    if (commandCase_ == 7) {
      output.writeMessage(7, (apache.rocketmq.v2.RecoverOrphanedTransactionCommand) command_);
    }
    if (commandCase_ == 8) {
      output.writeMessage(8, (apache.rocketmq.v2.PrintThreadStackTraceCommand) command_);
    }
    if (commandCase_ == 9) {
      output.writeMessage(9, (apache.rocketmq.v2.VerifyMessageCommand) command_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (commandCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (apache.rocketmq.v2.ReportActiveSettingsCommand) command_);
    }
    if (commandCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (apache.rocketmq.v2.ApplyPassiveSettingsResult) command_);
    }
    if (commandCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (apache.rocketmq.v2.ThreadStackTrace) command_);
    }
    if (commandCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (apache.rocketmq.v2.VerifyMessageResult) command_);
    }
    if (commandCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (apache.rocketmq.v2.ApplyPassiveSettingsCommand) command_);
    }
    if (commandCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (apache.rocketmq.v2.ReportActiveSettingsResult) command_);
    }
    if (commandCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (apache.rocketmq.v2.RecoverOrphanedTransactionCommand) command_);
    }
    if (commandCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (apache.rocketmq.v2.PrintThreadStackTraceCommand) command_);
    }
    if (commandCase_ == 9) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, (apache.rocketmq.v2.VerifyMessageCommand) command_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof apache.rocketmq.v2.TelemetryCommand)) {
      return super.equals(obj);
    }
    apache.rocketmq.v2.TelemetryCommand other = (apache.rocketmq.v2.TelemetryCommand) obj;

    if (!getCommandCase().equals(other.getCommandCase())) return false;
    switch (commandCase_) {
      case 1:
        if (!getReportActiveSettingsCommand()
            .equals(other.getReportActiveSettingsCommand())) return false;
        break;
      case 2:
        if (!getApplyPassiveSettingsResult()
            .equals(other.getApplyPassiveSettingsResult())) return false;
        break;
      case 3:
        if (!getThreadStackTrace()
            .equals(other.getThreadStackTrace())) return false;
        break;
      case 4:
        if (!getVerifyMessageResult()
            .equals(other.getVerifyMessageResult())) return false;
        break;
      case 5:
        if (!getApplyPassiveSettingsCommand()
            .equals(other.getApplyPassiveSettingsCommand())) return false;
        break;
      case 6:
        if (!getReportActiveSettingsResult()
            .equals(other.getReportActiveSettingsResult())) return false;
        break;
      case 7:
        if (!getRecoverOrphanedTransactionCommand()
            .equals(other.getRecoverOrphanedTransactionCommand())) return false;
        break;
      case 8:
        if (!getPrintThreadStackTraceCommand()
            .equals(other.getPrintThreadStackTraceCommand())) return false;
        break;
      case 9:
        if (!getVerifyMessageCommand()
            .equals(other.getVerifyMessageCommand())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (commandCase_) {
      case 1:
        hash = (37 * hash) + REPORT_ACTIVE_SETTINGS_COMMAND_FIELD_NUMBER;
        hash = (53 * hash) + getReportActiveSettingsCommand().hashCode();
        break;
      case 2:
        hash = (37 * hash) + APPLY_PASSIVE_SETTINGS_RESULT_FIELD_NUMBER;
        hash = (53 * hash) + getApplyPassiveSettingsResult().hashCode();
        break;
      case 3:
        hash = (37 * hash) + THREAD_STACK_TRACE_FIELD_NUMBER;
        hash = (53 * hash) + getThreadStackTrace().hashCode();
        break;
      case 4:
        hash = (37 * hash) + VERIFY_MESSAGE_RESULT_FIELD_NUMBER;
        hash = (53 * hash) + getVerifyMessageResult().hashCode();
        break;
      case 5:
        hash = (37 * hash) + APPLY_PASSIVE_SETTINGS_COMMAND_FIELD_NUMBER;
        hash = (53 * hash) + getApplyPassiveSettingsCommand().hashCode();
        break;
      case 6:
        hash = (37 * hash) + REPORT_ACTIVE_SETTINGS_RESULT_FIELD_NUMBER;
        hash = (53 * hash) + getReportActiveSettingsResult().hashCode();
        break;
      case 7:
        hash = (37 * hash) + RECOVER_ORPHANED_TRANSACTION_COMMAND_FIELD_NUMBER;
        hash = (53 * hash) + getRecoverOrphanedTransactionCommand().hashCode();
        break;
      case 8:
        hash = (37 * hash) + PRINT_THREAD_STACK_TRACE_COMMAND_FIELD_NUMBER;
        hash = (53 * hash) + getPrintThreadStackTraceCommand().hashCode();
        break;
      case 9:
        hash = (37 * hash) + VERIFY_MESSAGE_COMMAND_FIELD_NUMBER;
        hash = (53 * hash) + getVerifyMessageCommand().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static apache.rocketmq.v2.TelemetryCommand parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static apache.rocketmq.v2.TelemetryCommand parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static apache.rocketmq.v2.TelemetryCommand parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static apache.rocketmq.v2.TelemetryCommand parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static apache.rocketmq.v2.TelemetryCommand parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static apache.rocketmq.v2.TelemetryCommand parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static apache.rocketmq.v2.TelemetryCommand parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static apache.rocketmq.v2.TelemetryCommand parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static apache.rocketmq.v2.TelemetryCommand parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static apache.rocketmq.v2.TelemetryCommand parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static apache.rocketmq.v2.TelemetryCommand parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static apache.rocketmq.v2.TelemetryCommand parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(apache.rocketmq.v2.TelemetryCommand prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code apache.rocketmq.v2.TelemetryCommand}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:apache.rocketmq.v2.TelemetryCommand)
      apache.rocketmq.v2.TelemetryCommandOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return apache.rocketmq.v2.MQService.internal_static_apache_rocketmq_v2_TelemetryCommand_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return apache.rocketmq.v2.MQService.internal_static_apache_rocketmq_v2_TelemetryCommand_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              apache.rocketmq.v2.TelemetryCommand.class, apache.rocketmq.v2.TelemetryCommand.Builder.class);
    }

    // Construct using apache.rocketmq.v2.TelemetryCommand.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      commandCase_ = 0;
      command_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return apache.rocketmq.v2.MQService.internal_static_apache_rocketmq_v2_TelemetryCommand_descriptor;
    }

    @java.lang.Override
    public apache.rocketmq.v2.TelemetryCommand getDefaultInstanceForType() {
      return apache.rocketmq.v2.TelemetryCommand.getDefaultInstance();
    }

    @java.lang.Override
    public apache.rocketmq.v2.TelemetryCommand build() {
      apache.rocketmq.v2.TelemetryCommand result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public apache.rocketmq.v2.TelemetryCommand buildPartial() {
      apache.rocketmq.v2.TelemetryCommand result = new apache.rocketmq.v2.TelemetryCommand(this);
      if (commandCase_ == 1) {
        if (reportActiveSettingsCommandBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = reportActiveSettingsCommandBuilder_.build();
        }
      }
      if (commandCase_ == 2) {
        if (applyPassiveSettingsResultBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = applyPassiveSettingsResultBuilder_.build();
        }
      }
      if (commandCase_ == 3) {
        if (threadStackTraceBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = threadStackTraceBuilder_.build();
        }
      }
      if (commandCase_ == 4) {
        if (verifyMessageResultBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = verifyMessageResultBuilder_.build();
        }
      }
      if (commandCase_ == 5) {
        if (applyPassiveSettingsCommandBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = applyPassiveSettingsCommandBuilder_.build();
        }
      }
      if (commandCase_ == 6) {
        if (reportActiveSettingsResultBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = reportActiveSettingsResultBuilder_.build();
        }
      }
      if (commandCase_ == 7) {
        if (recoverOrphanedTransactionCommandBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = recoverOrphanedTransactionCommandBuilder_.build();
        }
      }
      if (commandCase_ == 8) {
        if (printThreadStackTraceCommandBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = printThreadStackTraceCommandBuilder_.build();
        }
      }
      if (commandCase_ == 9) {
        if (verifyMessageCommandBuilder_ == null) {
          result.command_ = command_;
        } else {
          result.command_ = verifyMessageCommandBuilder_.build();
        }
      }
      result.commandCase_ = commandCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof apache.rocketmq.v2.TelemetryCommand) {
        return mergeFrom((apache.rocketmq.v2.TelemetryCommand)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(apache.rocketmq.v2.TelemetryCommand other) {
      if (other == apache.rocketmq.v2.TelemetryCommand.getDefaultInstance()) return this;
      switch (other.getCommandCase()) {
        case REPORT_ACTIVE_SETTINGS_COMMAND: {
          mergeReportActiveSettingsCommand(other.getReportActiveSettingsCommand());
          break;
        }
        case APPLY_PASSIVE_SETTINGS_RESULT: {
          mergeApplyPassiveSettingsResult(other.getApplyPassiveSettingsResult());
          break;
        }
        case THREAD_STACK_TRACE: {
          mergeThreadStackTrace(other.getThreadStackTrace());
          break;
        }
        case VERIFY_MESSAGE_RESULT: {
          mergeVerifyMessageResult(other.getVerifyMessageResult());
          break;
        }
        case APPLY_PASSIVE_SETTINGS_COMMAND: {
          mergeApplyPassiveSettingsCommand(other.getApplyPassiveSettingsCommand());
          break;
        }
        case REPORT_ACTIVE_SETTINGS_RESULT: {
          mergeReportActiveSettingsResult(other.getReportActiveSettingsResult());
          break;
        }
        case RECOVER_ORPHANED_TRANSACTION_COMMAND: {
          mergeRecoverOrphanedTransactionCommand(other.getRecoverOrphanedTransactionCommand());
          break;
        }
        case PRINT_THREAD_STACK_TRACE_COMMAND: {
          mergePrintThreadStackTraceCommand(other.getPrintThreadStackTraceCommand());
          break;
        }
        case VERIFY_MESSAGE_COMMAND: {
          mergeVerifyMessageCommand(other.getVerifyMessageCommand());
          break;
        }
        case COMMAND_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      apache.rocketmq.v2.TelemetryCommand parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (apache.rocketmq.v2.TelemetryCommand) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int commandCase_ = 0;
    private java.lang.Object command_;
    public CommandCase
        getCommandCase() {
      return CommandCase.forNumber(
          commandCase_);
    }

    public Builder clearCommand() {
      commandCase_ = 0;
      command_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.ReportActiveSettingsCommand, apache.rocketmq.v2.ReportActiveSettingsCommand.Builder, apache.rocketmq.v2.ReportActiveSettingsCommandOrBuilder> reportActiveSettingsCommandBuilder_;
    /**
     * <pre>
     * These messages are from client.
     * Report active setting to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ReportActiveSettingsCommand report_active_settings_command = 1;</code>
     * @return Whether the reportActiveSettingsCommand field is set.
     */
    @java.lang.Override
    public boolean hasReportActiveSettingsCommand() {
      return commandCase_ == 1;
    }
    /**
     * <pre>
     * These messages are from client.
     * Report active setting to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ReportActiveSettingsCommand report_active_settings_command = 1;</code>
     * @return The reportActiveSettingsCommand.
     */
    @java.lang.Override
    public apache.rocketmq.v2.ReportActiveSettingsCommand getReportActiveSettingsCommand() {
      if (reportActiveSettingsCommandBuilder_ == null) {
        if (commandCase_ == 1) {
          return (apache.rocketmq.v2.ReportActiveSettingsCommand) command_;
        }
        return apache.rocketmq.v2.ReportActiveSettingsCommand.getDefaultInstance();
      } else {
        if (commandCase_ == 1) {
          return reportActiveSettingsCommandBuilder_.getMessage();
        }
        return apache.rocketmq.v2.ReportActiveSettingsCommand.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * These messages are from client.
     * Report active setting to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ReportActiveSettingsCommand report_active_settings_command = 1;</code>
     */
    public Builder setReportActiveSettingsCommand(apache.rocketmq.v2.ReportActiveSettingsCommand value) {
      if (reportActiveSettingsCommandBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        reportActiveSettingsCommandBuilder_.setMessage(value);
      }
      commandCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * These messages are from client.
     * Report active setting to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ReportActiveSettingsCommand report_active_settings_command = 1;</code>
     */
    public Builder setReportActiveSettingsCommand(
        apache.rocketmq.v2.ReportActiveSettingsCommand.Builder builderForValue) {
      if (reportActiveSettingsCommandBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        reportActiveSettingsCommandBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * These messages are from client.
     * Report active setting to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ReportActiveSettingsCommand report_active_settings_command = 1;</code>
     */
    public Builder mergeReportActiveSettingsCommand(apache.rocketmq.v2.ReportActiveSettingsCommand value) {
      if (reportActiveSettingsCommandBuilder_ == null) {
        if (commandCase_ == 1 &&
            command_ != apache.rocketmq.v2.ReportActiveSettingsCommand.getDefaultInstance()) {
          command_ = apache.rocketmq.v2.ReportActiveSettingsCommand.newBuilder((apache.rocketmq.v2.ReportActiveSettingsCommand) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 1) {
          reportActiveSettingsCommandBuilder_.mergeFrom(value);
        }
        reportActiveSettingsCommandBuilder_.setMessage(value);
      }
      commandCase_ = 1;
      return this;
    }
    /**
     * <pre>
     * These messages are from client.
     * Report active setting to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ReportActiveSettingsCommand report_active_settings_command = 1;</code>
     */
    public Builder clearReportActiveSettingsCommand() {
      if (reportActiveSettingsCommandBuilder_ == null) {
        if (commandCase_ == 1) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 1) {
          commandCase_ = 0;
          command_ = null;
        }
        reportActiveSettingsCommandBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * These messages are from client.
     * Report active setting to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ReportActiveSettingsCommand report_active_settings_command = 1;</code>
     */
    public apache.rocketmq.v2.ReportActiveSettingsCommand.Builder getReportActiveSettingsCommandBuilder() {
      return getReportActiveSettingsCommandFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * These messages are from client.
     * Report active setting to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ReportActiveSettingsCommand report_active_settings_command = 1;</code>
     */
    @java.lang.Override
    public apache.rocketmq.v2.ReportActiveSettingsCommandOrBuilder getReportActiveSettingsCommandOrBuilder() {
      if ((commandCase_ == 1) && (reportActiveSettingsCommandBuilder_ != null)) {
        return reportActiveSettingsCommandBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 1) {
          return (apache.rocketmq.v2.ReportActiveSettingsCommand) command_;
        }
        return apache.rocketmq.v2.ReportActiveSettingsCommand.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * These messages are from client.
     * Report active setting to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ReportActiveSettingsCommand report_active_settings_command = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.ReportActiveSettingsCommand, apache.rocketmq.v2.ReportActiveSettingsCommand.Builder, apache.rocketmq.v2.ReportActiveSettingsCommandOrBuilder> 
        getReportActiveSettingsCommandFieldBuilder() {
      if (reportActiveSettingsCommandBuilder_ == null) {
        if (!(commandCase_ == 1)) {
          command_ = apache.rocketmq.v2.ReportActiveSettingsCommand.getDefaultInstance();
        }
        reportActiveSettingsCommandBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            apache.rocketmq.v2.ReportActiveSettingsCommand, apache.rocketmq.v2.ReportActiveSettingsCommand.Builder, apache.rocketmq.v2.ReportActiveSettingsCommandOrBuilder>(
                (apache.rocketmq.v2.ReportActiveSettingsCommand) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 1;
      onChanged();;
      return reportActiveSettingsCommandBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.ApplyPassiveSettingsResult, apache.rocketmq.v2.ApplyPassiveSettingsResult.Builder, apache.rocketmq.v2.ApplyPassiveSettingsResultOrBuilder> applyPassiveSettingsResultBuilder_;
    /**
     * <pre>
     * Ack `ApplyPassiveSettingsCommand` from server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ApplyPassiveSettingsResult apply_passive_settings_result = 2;</code>
     * @return Whether the applyPassiveSettingsResult field is set.
     */
    @java.lang.Override
    public boolean hasApplyPassiveSettingsResult() {
      return commandCase_ == 2;
    }
    /**
     * <pre>
     * Ack `ApplyPassiveSettingsCommand` from server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ApplyPassiveSettingsResult apply_passive_settings_result = 2;</code>
     * @return The applyPassiveSettingsResult.
     */
    @java.lang.Override
    public apache.rocketmq.v2.ApplyPassiveSettingsResult getApplyPassiveSettingsResult() {
      if (applyPassiveSettingsResultBuilder_ == null) {
        if (commandCase_ == 2) {
          return (apache.rocketmq.v2.ApplyPassiveSettingsResult) command_;
        }
        return apache.rocketmq.v2.ApplyPassiveSettingsResult.getDefaultInstance();
      } else {
        if (commandCase_ == 2) {
          return applyPassiveSettingsResultBuilder_.getMessage();
        }
        return apache.rocketmq.v2.ApplyPassiveSettingsResult.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Ack `ApplyPassiveSettingsCommand` from server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ApplyPassiveSettingsResult apply_passive_settings_result = 2;</code>
     */
    public Builder setApplyPassiveSettingsResult(apache.rocketmq.v2.ApplyPassiveSettingsResult value) {
      if (applyPassiveSettingsResultBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        applyPassiveSettingsResultBuilder_.setMessage(value);
      }
      commandCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Ack `ApplyPassiveSettingsCommand` from server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ApplyPassiveSettingsResult apply_passive_settings_result = 2;</code>
     */
    public Builder setApplyPassiveSettingsResult(
        apache.rocketmq.v2.ApplyPassiveSettingsResult.Builder builderForValue) {
      if (applyPassiveSettingsResultBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        applyPassiveSettingsResultBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Ack `ApplyPassiveSettingsCommand` from server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ApplyPassiveSettingsResult apply_passive_settings_result = 2;</code>
     */
    public Builder mergeApplyPassiveSettingsResult(apache.rocketmq.v2.ApplyPassiveSettingsResult value) {
      if (applyPassiveSettingsResultBuilder_ == null) {
        if (commandCase_ == 2 &&
            command_ != apache.rocketmq.v2.ApplyPassiveSettingsResult.getDefaultInstance()) {
          command_ = apache.rocketmq.v2.ApplyPassiveSettingsResult.newBuilder((apache.rocketmq.v2.ApplyPassiveSettingsResult) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 2) {
          applyPassiveSettingsResultBuilder_.mergeFrom(value);
        }
        applyPassiveSettingsResultBuilder_.setMessage(value);
      }
      commandCase_ = 2;
      return this;
    }
    /**
     * <pre>
     * Ack `ApplyPassiveSettingsCommand` from server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ApplyPassiveSettingsResult apply_passive_settings_result = 2;</code>
     */
    public Builder clearApplyPassiveSettingsResult() {
      if (applyPassiveSettingsResultBuilder_ == null) {
        if (commandCase_ == 2) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 2) {
          commandCase_ = 0;
          command_ = null;
        }
        applyPassiveSettingsResultBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Ack `ApplyPassiveSettingsCommand` from server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ApplyPassiveSettingsResult apply_passive_settings_result = 2;</code>
     */
    public apache.rocketmq.v2.ApplyPassiveSettingsResult.Builder getApplyPassiveSettingsResultBuilder() {
      return getApplyPassiveSettingsResultFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Ack `ApplyPassiveSettingsCommand` from server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ApplyPassiveSettingsResult apply_passive_settings_result = 2;</code>
     */
    @java.lang.Override
    public apache.rocketmq.v2.ApplyPassiveSettingsResultOrBuilder getApplyPassiveSettingsResultOrBuilder() {
      if ((commandCase_ == 2) && (applyPassiveSettingsResultBuilder_ != null)) {
        return applyPassiveSettingsResultBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 2) {
          return (apache.rocketmq.v2.ApplyPassiveSettingsResult) command_;
        }
        return apache.rocketmq.v2.ApplyPassiveSettingsResult.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Ack `ApplyPassiveSettingsCommand` from server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ApplyPassiveSettingsResult apply_passive_settings_result = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.ApplyPassiveSettingsResult, apache.rocketmq.v2.ApplyPassiveSettingsResult.Builder, apache.rocketmq.v2.ApplyPassiveSettingsResultOrBuilder> 
        getApplyPassiveSettingsResultFieldBuilder() {
      if (applyPassiveSettingsResultBuilder_ == null) {
        if (!(commandCase_ == 2)) {
          command_ = apache.rocketmq.v2.ApplyPassiveSettingsResult.getDefaultInstance();
        }
        applyPassiveSettingsResultBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            apache.rocketmq.v2.ApplyPassiveSettingsResult, apache.rocketmq.v2.ApplyPassiveSettingsResult.Builder, apache.rocketmq.v2.ApplyPassiveSettingsResultOrBuilder>(
                (apache.rocketmq.v2.ApplyPassiveSettingsResult) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 2;
      onChanged();;
      return applyPassiveSettingsResultBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.ThreadStackTrace, apache.rocketmq.v2.ThreadStackTrace.Builder, apache.rocketmq.v2.ThreadStackTraceOrBuilder> threadStackTraceBuilder_;
    /**
     * <pre>
     * Report thread stack trace to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ThreadStackTrace thread_stack_trace = 3;</code>
     * @return Whether the threadStackTrace field is set.
     */
    @java.lang.Override
    public boolean hasThreadStackTrace() {
      return commandCase_ == 3;
    }
    /**
     * <pre>
     * Report thread stack trace to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ThreadStackTrace thread_stack_trace = 3;</code>
     * @return The threadStackTrace.
     */
    @java.lang.Override
    public apache.rocketmq.v2.ThreadStackTrace getThreadStackTrace() {
      if (threadStackTraceBuilder_ == null) {
        if (commandCase_ == 3) {
          return (apache.rocketmq.v2.ThreadStackTrace) command_;
        }
        return apache.rocketmq.v2.ThreadStackTrace.getDefaultInstance();
      } else {
        if (commandCase_ == 3) {
          return threadStackTraceBuilder_.getMessage();
        }
        return apache.rocketmq.v2.ThreadStackTrace.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Report thread stack trace to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ThreadStackTrace thread_stack_trace = 3;</code>
     */
    public Builder setThreadStackTrace(apache.rocketmq.v2.ThreadStackTrace value) {
      if (threadStackTraceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        threadStackTraceBuilder_.setMessage(value);
      }
      commandCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Report thread stack trace to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ThreadStackTrace thread_stack_trace = 3;</code>
     */
    public Builder setThreadStackTrace(
        apache.rocketmq.v2.ThreadStackTrace.Builder builderForValue) {
      if (threadStackTraceBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        threadStackTraceBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Report thread stack trace to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ThreadStackTrace thread_stack_trace = 3;</code>
     */
    public Builder mergeThreadStackTrace(apache.rocketmq.v2.ThreadStackTrace value) {
      if (threadStackTraceBuilder_ == null) {
        if (commandCase_ == 3 &&
            command_ != apache.rocketmq.v2.ThreadStackTrace.getDefaultInstance()) {
          command_ = apache.rocketmq.v2.ThreadStackTrace.newBuilder((apache.rocketmq.v2.ThreadStackTrace) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 3) {
          threadStackTraceBuilder_.mergeFrom(value);
        }
        threadStackTraceBuilder_.setMessage(value);
      }
      commandCase_ = 3;
      return this;
    }
    /**
     * <pre>
     * Report thread stack trace to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ThreadStackTrace thread_stack_trace = 3;</code>
     */
    public Builder clearThreadStackTrace() {
      if (threadStackTraceBuilder_ == null) {
        if (commandCase_ == 3) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 3) {
          commandCase_ = 0;
          command_ = null;
        }
        threadStackTraceBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Report thread stack trace to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ThreadStackTrace thread_stack_trace = 3;</code>
     */
    public apache.rocketmq.v2.ThreadStackTrace.Builder getThreadStackTraceBuilder() {
      return getThreadStackTraceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Report thread stack trace to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ThreadStackTrace thread_stack_trace = 3;</code>
     */
    @java.lang.Override
    public apache.rocketmq.v2.ThreadStackTraceOrBuilder getThreadStackTraceOrBuilder() {
      if ((commandCase_ == 3) && (threadStackTraceBuilder_ != null)) {
        return threadStackTraceBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 3) {
          return (apache.rocketmq.v2.ThreadStackTrace) command_;
        }
        return apache.rocketmq.v2.ThreadStackTrace.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Report thread stack trace to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ThreadStackTrace thread_stack_trace = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.ThreadStackTrace, apache.rocketmq.v2.ThreadStackTrace.Builder, apache.rocketmq.v2.ThreadStackTraceOrBuilder> 
        getThreadStackTraceFieldBuilder() {
      if (threadStackTraceBuilder_ == null) {
        if (!(commandCase_ == 3)) {
          command_ = apache.rocketmq.v2.ThreadStackTrace.getDefaultInstance();
        }
        threadStackTraceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            apache.rocketmq.v2.ThreadStackTrace, apache.rocketmq.v2.ThreadStackTrace.Builder, apache.rocketmq.v2.ThreadStackTraceOrBuilder>(
                (apache.rocketmq.v2.ThreadStackTrace) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 3;
      onChanged();;
      return threadStackTraceBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.VerifyMessageResult, apache.rocketmq.v2.VerifyMessageResult.Builder, apache.rocketmq.v2.VerifyMessageResultOrBuilder> verifyMessageResultBuilder_;
    /**
     * <pre>
     * Repost message verify result to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.VerifyMessageResult verify_message_result = 4;</code>
     * @return Whether the verifyMessageResult field is set.
     */
    @java.lang.Override
    public boolean hasVerifyMessageResult() {
      return commandCase_ == 4;
    }
    /**
     * <pre>
     * Repost message verify result to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.VerifyMessageResult verify_message_result = 4;</code>
     * @return The verifyMessageResult.
     */
    @java.lang.Override
    public apache.rocketmq.v2.VerifyMessageResult getVerifyMessageResult() {
      if (verifyMessageResultBuilder_ == null) {
        if (commandCase_ == 4) {
          return (apache.rocketmq.v2.VerifyMessageResult) command_;
        }
        return apache.rocketmq.v2.VerifyMessageResult.getDefaultInstance();
      } else {
        if (commandCase_ == 4) {
          return verifyMessageResultBuilder_.getMessage();
        }
        return apache.rocketmq.v2.VerifyMessageResult.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Repost message verify result to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.VerifyMessageResult verify_message_result = 4;</code>
     */
    public Builder setVerifyMessageResult(apache.rocketmq.v2.VerifyMessageResult value) {
      if (verifyMessageResultBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        verifyMessageResultBuilder_.setMessage(value);
      }
      commandCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Repost message verify result to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.VerifyMessageResult verify_message_result = 4;</code>
     */
    public Builder setVerifyMessageResult(
        apache.rocketmq.v2.VerifyMessageResult.Builder builderForValue) {
      if (verifyMessageResultBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        verifyMessageResultBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Repost message verify result to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.VerifyMessageResult verify_message_result = 4;</code>
     */
    public Builder mergeVerifyMessageResult(apache.rocketmq.v2.VerifyMessageResult value) {
      if (verifyMessageResultBuilder_ == null) {
        if (commandCase_ == 4 &&
            command_ != apache.rocketmq.v2.VerifyMessageResult.getDefaultInstance()) {
          command_ = apache.rocketmq.v2.VerifyMessageResult.newBuilder((apache.rocketmq.v2.VerifyMessageResult) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 4) {
          verifyMessageResultBuilder_.mergeFrom(value);
        }
        verifyMessageResultBuilder_.setMessage(value);
      }
      commandCase_ = 4;
      return this;
    }
    /**
     * <pre>
     * Repost message verify result to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.VerifyMessageResult verify_message_result = 4;</code>
     */
    public Builder clearVerifyMessageResult() {
      if (verifyMessageResultBuilder_ == null) {
        if (commandCase_ == 4) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 4) {
          commandCase_ = 0;
          command_ = null;
        }
        verifyMessageResultBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Repost message verify result to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.VerifyMessageResult verify_message_result = 4;</code>
     */
    public apache.rocketmq.v2.VerifyMessageResult.Builder getVerifyMessageResultBuilder() {
      return getVerifyMessageResultFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Repost message verify result to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.VerifyMessageResult verify_message_result = 4;</code>
     */
    @java.lang.Override
    public apache.rocketmq.v2.VerifyMessageResultOrBuilder getVerifyMessageResultOrBuilder() {
      if ((commandCase_ == 4) && (verifyMessageResultBuilder_ != null)) {
        return verifyMessageResultBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 4) {
          return (apache.rocketmq.v2.VerifyMessageResult) command_;
        }
        return apache.rocketmq.v2.VerifyMessageResult.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Repost message verify result to server.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.VerifyMessageResult verify_message_result = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.VerifyMessageResult, apache.rocketmq.v2.VerifyMessageResult.Builder, apache.rocketmq.v2.VerifyMessageResultOrBuilder> 
        getVerifyMessageResultFieldBuilder() {
      if (verifyMessageResultBuilder_ == null) {
        if (!(commandCase_ == 4)) {
          command_ = apache.rocketmq.v2.VerifyMessageResult.getDefaultInstance();
        }
        verifyMessageResultBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            apache.rocketmq.v2.VerifyMessageResult, apache.rocketmq.v2.VerifyMessageResult.Builder, apache.rocketmq.v2.VerifyMessageResultOrBuilder>(
                (apache.rocketmq.v2.VerifyMessageResult) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 4;
      onChanged();;
      return verifyMessageResultBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.ApplyPassiveSettingsCommand, apache.rocketmq.v2.ApplyPassiveSettingsCommand.Builder, apache.rocketmq.v2.ApplyPassiveSettingsCommandOrBuilder> applyPassiveSettingsCommandBuilder_;
    /**
     * <pre>
     * There messages are from server.
     * Deliver passive settings to client.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ApplyPassiveSettingsCommand apply_passive_settings_command = 5;</code>
     * @return Whether the applyPassiveSettingsCommand field is set.
     */
    @java.lang.Override
    public boolean hasApplyPassiveSettingsCommand() {
      return commandCase_ == 5;
    }
    /**
     * <pre>
     * There messages are from server.
     * Deliver passive settings to client.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ApplyPassiveSettingsCommand apply_passive_settings_command = 5;</code>
     * @return The applyPassiveSettingsCommand.
     */
    @java.lang.Override
    public apache.rocketmq.v2.ApplyPassiveSettingsCommand getApplyPassiveSettingsCommand() {
      if (applyPassiveSettingsCommandBuilder_ == null) {
        if (commandCase_ == 5) {
          return (apache.rocketmq.v2.ApplyPassiveSettingsCommand) command_;
        }
        return apache.rocketmq.v2.ApplyPassiveSettingsCommand.getDefaultInstance();
      } else {
        if (commandCase_ == 5) {
          return applyPassiveSettingsCommandBuilder_.getMessage();
        }
        return apache.rocketmq.v2.ApplyPassiveSettingsCommand.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * There messages are from server.
     * Deliver passive settings to client.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ApplyPassiveSettingsCommand apply_passive_settings_command = 5;</code>
     */
    public Builder setApplyPassiveSettingsCommand(apache.rocketmq.v2.ApplyPassiveSettingsCommand value) {
      if (applyPassiveSettingsCommandBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        applyPassiveSettingsCommandBuilder_.setMessage(value);
      }
      commandCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * There messages are from server.
     * Deliver passive settings to client.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ApplyPassiveSettingsCommand apply_passive_settings_command = 5;</code>
     */
    public Builder setApplyPassiveSettingsCommand(
        apache.rocketmq.v2.ApplyPassiveSettingsCommand.Builder builderForValue) {
      if (applyPassiveSettingsCommandBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        applyPassiveSettingsCommandBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * There messages are from server.
     * Deliver passive settings to client.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ApplyPassiveSettingsCommand apply_passive_settings_command = 5;</code>
     */
    public Builder mergeApplyPassiveSettingsCommand(apache.rocketmq.v2.ApplyPassiveSettingsCommand value) {
      if (applyPassiveSettingsCommandBuilder_ == null) {
        if (commandCase_ == 5 &&
            command_ != apache.rocketmq.v2.ApplyPassiveSettingsCommand.getDefaultInstance()) {
          command_ = apache.rocketmq.v2.ApplyPassiveSettingsCommand.newBuilder((apache.rocketmq.v2.ApplyPassiveSettingsCommand) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 5) {
          applyPassiveSettingsCommandBuilder_.mergeFrom(value);
        }
        applyPassiveSettingsCommandBuilder_.setMessage(value);
      }
      commandCase_ = 5;
      return this;
    }
    /**
     * <pre>
     * There messages are from server.
     * Deliver passive settings to client.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ApplyPassiveSettingsCommand apply_passive_settings_command = 5;</code>
     */
    public Builder clearApplyPassiveSettingsCommand() {
      if (applyPassiveSettingsCommandBuilder_ == null) {
        if (commandCase_ == 5) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 5) {
          commandCase_ = 0;
          command_ = null;
        }
        applyPassiveSettingsCommandBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * There messages are from server.
     * Deliver passive settings to client.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ApplyPassiveSettingsCommand apply_passive_settings_command = 5;</code>
     */
    public apache.rocketmq.v2.ApplyPassiveSettingsCommand.Builder getApplyPassiveSettingsCommandBuilder() {
      return getApplyPassiveSettingsCommandFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * There messages are from server.
     * Deliver passive settings to client.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ApplyPassiveSettingsCommand apply_passive_settings_command = 5;</code>
     */
    @java.lang.Override
    public apache.rocketmq.v2.ApplyPassiveSettingsCommandOrBuilder getApplyPassiveSettingsCommandOrBuilder() {
      if ((commandCase_ == 5) && (applyPassiveSettingsCommandBuilder_ != null)) {
        return applyPassiveSettingsCommandBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 5) {
          return (apache.rocketmq.v2.ApplyPassiveSettingsCommand) command_;
        }
        return apache.rocketmq.v2.ApplyPassiveSettingsCommand.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * There messages are from server.
     * Deliver passive settings to client.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ApplyPassiveSettingsCommand apply_passive_settings_command = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.ApplyPassiveSettingsCommand, apache.rocketmq.v2.ApplyPassiveSettingsCommand.Builder, apache.rocketmq.v2.ApplyPassiveSettingsCommandOrBuilder> 
        getApplyPassiveSettingsCommandFieldBuilder() {
      if (applyPassiveSettingsCommandBuilder_ == null) {
        if (!(commandCase_ == 5)) {
          command_ = apache.rocketmq.v2.ApplyPassiveSettingsCommand.getDefaultInstance();
        }
        applyPassiveSettingsCommandBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            apache.rocketmq.v2.ApplyPassiveSettingsCommand, apache.rocketmq.v2.ApplyPassiveSettingsCommand.Builder, apache.rocketmq.v2.ApplyPassiveSettingsCommandOrBuilder>(
                (apache.rocketmq.v2.ApplyPassiveSettingsCommand) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 5;
      onChanged();;
      return applyPassiveSettingsCommandBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.ReportActiveSettingsResult, apache.rocketmq.v2.ReportActiveSettingsResult.Builder, apache.rocketmq.v2.ReportActiveSettingsResultOrBuilder> reportActiveSettingsResultBuilder_;
    /**
     * <pre>
     * Ack `ReportActiveSettingsCommand` from client.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ReportActiveSettingsResult report_active_settings_result = 6;</code>
     * @return Whether the reportActiveSettingsResult field is set.
     */
    @java.lang.Override
    public boolean hasReportActiveSettingsResult() {
      return commandCase_ == 6;
    }
    /**
     * <pre>
     * Ack `ReportActiveSettingsCommand` from client.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ReportActiveSettingsResult report_active_settings_result = 6;</code>
     * @return The reportActiveSettingsResult.
     */
    @java.lang.Override
    public apache.rocketmq.v2.ReportActiveSettingsResult getReportActiveSettingsResult() {
      if (reportActiveSettingsResultBuilder_ == null) {
        if (commandCase_ == 6) {
          return (apache.rocketmq.v2.ReportActiveSettingsResult) command_;
        }
        return apache.rocketmq.v2.ReportActiveSettingsResult.getDefaultInstance();
      } else {
        if (commandCase_ == 6) {
          return reportActiveSettingsResultBuilder_.getMessage();
        }
        return apache.rocketmq.v2.ReportActiveSettingsResult.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Ack `ReportActiveSettingsCommand` from client.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ReportActiveSettingsResult report_active_settings_result = 6;</code>
     */
    public Builder setReportActiveSettingsResult(apache.rocketmq.v2.ReportActiveSettingsResult value) {
      if (reportActiveSettingsResultBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        reportActiveSettingsResultBuilder_.setMessage(value);
      }
      commandCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * Ack `ReportActiveSettingsCommand` from client.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ReportActiveSettingsResult report_active_settings_result = 6;</code>
     */
    public Builder setReportActiveSettingsResult(
        apache.rocketmq.v2.ReportActiveSettingsResult.Builder builderForValue) {
      if (reportActiveSettingsResultBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        reportActiveSettingsResultBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * Ack `ReportActiveSettingsCommand` from client.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ReportActiveSettingsResult report_active_settings_result = 6;</code>
     */
    public Builder mergeReportActiveSettingsResult(apache.rocketmq.v2.ReportActiveSettingsResult value) {
      if (reportActiveSettingsResultBuilder_ == null) {
        if (commandCase_ == 6 &&
            command_ != apache.rocketmq.v2.ReportActiveSettingsResult.getDefaultInstance()) {
          command_ = apache.rocketmq.v2.ReportActiveSettingsResult.newBuilder((apache.rocketmq.v2.ReportActiveSettingsResult) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 6) {
          reportActiveSettingsResultBuilder_.mergeFrom(value);
        }
        reportActiveSettingsResultBuilder_.setMessage(value);
      }
      commandCase_ = 6;
      return this;
    }
    /**
     * <pre>
     * Ack `ReportActiveSettingsCommand` from client.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ReportActiveSettingsResult report_active_settings_result = 6;</code>
     */
    public Builder clearReportActiveSettingsResult() {
      if (reportActiveSettingsResultBuilder_ == null) {
        if (commandCase_ == 6) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 6) {
          commandCase_ = 0;
          command_ = null;
        }
        reportActiveSettingsResultBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Ack `ReportActiveSettingsCommand` from client.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ReportActiveSettingsResult report_active_settings_result = 6;</code>
     */
    public apache.rocketmq.v2.ReportActiveSettingsResult.Builder getReportActiveSettingsResultBuilder() {
      return getReportActiveSettingsResultFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Ack `ReportActiveSettingsCommand` from client.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ReportActiveSettingsResult report_active_settings_result = 6;</code>
     */
    @java.lang.Override
    public apache.rocketmq.v2.ReportActiveSettingsResultOrBuilder getReportActiveSettingsResultOrBuilder() {
      if ((commandCase_ == 6) && (reportActiveSettingsResultBuilder_ != null)) {
        return reportActiveSettingsResultBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 6) {
          return (apache.rocketmq.v2.ReportActiveSettingsResult) command_;
        }
        return apache.rocketmq.v2.ReportActiveSettingsResult.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Ack `ReportActiveSettingsCommand` from client.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.ReportActiveSettingsResult report_active_settings_result = 6;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.ReportActiveSettingsResult, apache.rocketmq.v2.ReportActiveSettingsResult.Builder, apache.rocketmq.v2.ReportActiveSettingsResultOrBuilder> 
        getReportActiveSettingsResultFieldBuilder() {
      if (reportActiveSettingsResultBuilder_ == null) {
        if (!(commandCase_ == 6)) {
          command_ = apache.rocketmq.v2.ReportActiveSettingsResult.getDefaultInstance();
        }
        reportActiveSettingsResultBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            apache.rocketmq.v2.ReportActiveSettingsResult, apache.rocketmq.v2.ReportActiveSettingsResult.Builder, apache.rocketmq.v2.ReportActiveSettingsResultOrBuilder>(
                (apache.rocketmq.v2.ReportActiveSettingsResult) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 6;
      onChanged();;
      return reportActiveSettingsResultBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.RecoverOrphanedTransactionCommand, apache.rocketmq.v2.RecoverOrphanedTransactionCommand.Builder, apache.rocketmq.v2.RecoverOrphanedTransactionCommandOrBuilder> recoverOrphanedTransactionCommandBuilder_;
    /**
     * <pre>
     * Request client to recover the orphaned transaction message.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RecoverOrphanedTransactionCommand recover_orphaned_transaction_command = 7;</code>
     * @return Whether the recoverOrphanedTransactionCommand field is set.
     */
    @java.lang.Override
    public boolean hasRecoverOrphanedTransactionCommand() {
      return commandCase_ == 7;
    }
    /**
     * <pre>
     * Request client to recover the orphaned transaction message.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RecoverOrphanedTransactionCommand recover_orphaned_transaction_command = 7;</code>
     * @return The recoverOrphanedTransactionCommand.
     */
    @java.lang.Override
    public apache.rocketmq.v2.RecoverOrphanedTransactionCommand getRecoverOrphanedTransactionCommand() {
      if (recoverOrphanedTransactionCommandBuilder_ == null) {
        if (commandCase_ == 7) {
          return (apache.rocketmq.v2.RecoverOrphanedTransactionCommand) command_;
        }
        return apache.rocketmq.v2.RecoverOrphanedTransactionCommand.getDefaultInstance();
      } else {
        if (commandCase_ == 7) {
          return recoverOrphanedTransactionCommandBuilder_.getMessage();
        }
        return apache.rocketmq.v2.RecoverOrphanedTransactionCommand.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Request client to recover the orphaned transaction message.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RecoverOrphanedTransactionCommand recover_orphaned_transaction_command = 7;</code>
     */
    public Builder setRecoverOrphanedTransactionCommand(apache.rocketmq.v2.RecoverOrphanedTransactionCommand value) {
      if (recoverOrphanedTransactionCommandBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        recoverOrphanedTransactionCommandBuilder_.setMessage(value);
      }
      commandCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Request client to recover the orphaned transaction message.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RecoverOrphanedTransactionCommand recover_orphaned_transaction_command = 7;</code>
     */
    public Builder setRecoverOrphanedTransactionCommand(
        apache.rocketmq.v2.RecoverOrphanedTransactionCommand.Builder builderForValue) {
      if (recoverOrphanedTransactionCommandBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        recoverOrphanedTransactionCommandBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Request client to recover the orphaned transaction message.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RecoverOrphanedTransactionCommand recover_orphaned_transaction_command = 7;</code>
     */
    public Builder mergeRecoverOrphanedTransactionCommand(apache.rocketmq.v2.RecoverOrphanedTransactionCommand value) {
      if (recoverOrphanedTransactionCommandBuilder_ == null) {
        if (commandCase_ == 7 &&
            command_ != apache.rocketmq.v2.RecoverOrphanedTransactionCommand.getDefaultInstance()) {
          command_ = apache.rocketmq.v2.RecoverOrphanedTransactionCommand.newBuilder((apache.rocketmq.v2.RecoverOrphanedTransactionCommand) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 7) {
          recoverOrphanedTransactionCommandBuilder_.mergeFrom(value);
        }
        recoverOrphanedTransactionCommandBuilder_.setMessage(value);
      }
      commandCase_ = 7;
      return this;
    }
    /**
     * <pre>
     * Request client to recover the orphaned transaction message.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RecoverOrphanedTransactionCommand recover_orphaned_transaction_command = 7;</code>
     */
    public Builder clearRecoverOrphanedTransactionCommand() {
      if (recoverOrphanedTransactionCommandBuilder_ == null) {
        if (commandCase_ == 7) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 7) {
          commandCase_ = 0;
          command_ = null;
        }
        recoverOrphanedTransactionCommandBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Request client to recover the orphaned transaction message.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RecoverOrphanedTransactionCommand recover_orphaned_transaction_command = 7;</code>
     */
    public apache.rocketmq.v2.RecoverOrphanedTransactionCommand.Builder getRecoverOrphanedTransactionCommandBuilder() {
      return getRecoverOrphanedTransactionCommandFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Request client to recover the orphaned transaction message.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RecoverOrphanedTransactionCommand recover_orphaned_transaction_command = 7;</code>
     */
    @java.lang.Override
    public apache.rocketmq.v2.RecoverOrphanedTransactionCommandOrBuilder getRecoverOrphanedTransactionCommandOrBuilder() {
      if ((commandCase_ == 7) && (recoverOrphanedTransactionCommandBuilder_ != null)) {
        return recoverOrphanedTransactionCommandBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 7) {
          return (apache.rocketmq.v2.RecoverOrphanedTransactionCommand) command_;
        }
        return apache.rocketmq.v2.RecoverOrphanedTransactionCommand.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Request client to recover the orphaned transaction message.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.RecoverOrphanedTransactionCommand recover_orphaned_transaction_command = 7;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.RecoverOrphanedTransactionCommand, apache.rocketmq.v2.RecoverOrphanedTransactionCommand.Builder, apache.rocketmq.v2.RecoverOrphanedTransactionCommandOrBuilder> 
        getRecoverOrphanedTransactionCommandFieldBuilder() {
      if (recoverOrphanedTransactionCommandBuilder_ == null) {
        if (!(commandCase_ == 7)) {
          command_ = apache.rocketmq.v2.RecoverOrphanedTransactionCommand.getDefaultInstance();
        }
        recoverOrphanedTransactionCommandBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            apache.rocketmq.v2.RecoverOrphanedTransactionCommand, apache.rocketmq.v2.RecoverOrphanedTransactionCommand.Builder, apache.rocketmq.v2.RecoverOrphanedTransactionCommandOrBuilder>(
                (apache.rocketmq.v2.RecoverOrphanedTransactionCommand) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 7;
      onChanged();;
      return recoverOrphanedTransactionCommandBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.PrintThreadStackTraceCommand, apache.rocketmq.v2.PrintThreadStackTraceCommand.Builder, apache.rocketmq.v2.PrintThreadStackTraceCommandOrBuilder> printThreadStackTraceCommandBuilder_;
    /**
     * <pre>
     * Request client to print thread stack trace.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.PrintThreadStackTraceCommand print_thread_stack_trace_command = 8;</code>
     * @return Whether the printThreadStackTraceCommand field is set.
     */
    @java.lang.Override
    public boolean hasPrintThreadStackTraceCommand() {
      return commandCase_ == 8;
    }
    /**
     * <pre>
     * Request client to print thread stack trace.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.PrintThreadStackTraceCommand print_thread_stack_trace_command = 8;</code>
     * @return The printThreadStackTraceCommand.
     */
    @java.lang.Override
    public apache.rocketmq.v2.PrintThreadStackTraceCommand getPrintThreadStackTraceCommand() {
      if (printThreadStackTraceCommandBuilder_ == null) {
        if (commandCase_ == 8) {
          return (apache.rocketmq.v2.PrintThreadStackTraceCommand) command_;
        }
        return apache.rocketmq.v2.PrintThreadStackTraceCommand.getDefaultInstance();
      } else {
        if (commandCase_ == 8) {
          return printThreadStackTraceCommandBuilder_.getMessage();
        }
        return apache.rocketmq.v2.PrintThreadStackTraceCommand.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Request client to print thread stack trace.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.PrintThreadStackTraceCommand print_thread_stack_trace_command = 8;</code>
     */
    public Builder setPrintThreadStackTraceCommand(apache.rocketmq.v2.PrintThreadStackTraceCommand value) {
      if (printThreadStackTraceCommandBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        printThreadStackTraceCommandBuilder_.setMessage(value);
      }
      commandCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Request client to print thread stack trace.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.PrintThreadStackTraceCommand print_thread_stack_trace_command = 8;</code>
     */
    public Builder setPrintThreadStackTraceCommand(
        apache.rocketmq.v2.PrintThreadStackTraceCommand.Builder builderForValue) {
      if (printThreadStackTraceCommandBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        printThreadStackTraceCommandBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Request client to print thread stack trace.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.PrintThreadStackTraceCommand print_thread_stack_trace_command = 8;</code>
     */
    public Builder mergePrintThreadStackTraceCommand(apache.rocketmq.v2.PrintThreadStackTraceCommand value) {
      if (printThreadStackTraceCommandBuilder_ == null) {
        if (commandCase_ == 8 &&
            command_ != apache.rocketmq.v2.PrintThreadStackTraceCommand.getDefaultInstance()) {
          command_ = apache.rocketmq.v2.PrintThreadStackTraceCommand.newBuilder((apache.rocketmq.v2.PrintThreadStackTraceCommand) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 8) {
          printThreadStackTraceCommandBuilder_.mergeFrom(value);
        }
        printThreadStackTraceCommandBuilder_.setMessage(value);
      }
      commandCase_ = 8;
      return this;
    }
    /**
     * <pre>
     * Request client to print thread stack trace.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.PrintThreadStackTraceCommand print_thread_stack_trace_command = 8;</code>
     */
    public Builder clearPrintThreadStackTraceCommand() {
      if (printThreadStackTraceCommandBuilder_ == null) {
        if (commandCase_ == 8) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 8) {
          commandCase_ = 0;
          command_ = null;
        }
        printThreadStackTraceCommandBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Request client to print thread stack trace.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.PrintThreadStackTraceCommand print_thread_stack_trace_command = 8;</code>
     */
    public apache.rocketmq.v2.PrintThreadStackTraceCommand.Builder getPrintThreadStackTraceCommandBuilder() {
      return getPrintThreadStackTraceCommandFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Request client to print thread stack trace.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.PrintThreadStackTraceCommand print_thread_stack_trace_command = 8;</code>
     */
    @java.lang.Override
    public apache.rocketmq.v2.PrintThreadStackTraceCommandOrBuilder getPrintThreadStackTraceCommandOrBuilder() {
      if ((commandCase_ == 8) && (printThreadStackTraceCommandBuilder_ != null)) {
        return printThreadStackTraceCommandBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 8) {
          return (apache.rocketmq.v2.PrintThreadStackTraceCommand) command_;
        }
        return apache.rocketmq.v2.PrintThreadStackTraceCommand.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Request client to print thread stack trace.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.PrintThreadStackTraceCommand print_thread_stack_trace_command = 8;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.PrintThreadStackTraceCommand, apache.rocketmq.v2.PrintThreadStackTraceCommand.Builder, apache.rocketmq.v2.PrintThreadStackTraceCommandOrBuilder> 
        getPrintThreadStackTraceCommandFieldBuilder() {
      if (printThreadStackTraceCommandBuilder_ == null) {
        if (!(commandCase_ == 8)) {
          command_ = apache.rocketmq.v2.PrintThreadStackTraceCommand.getDefaultInstance();
        }
        printThreadStackTraceCommandBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            apache.rocketmq.v2.PrintThreadStackTraceCommand, apache.rocketmq.v2.PrintThreadStackTraceCommand.Builder, apache.rocketmq.v2.PrintThreadStackTraceCommandOrBuilder>(
                (apache.rocketmq.v2.PrintThreadStackTraceCommand) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 8;
      onChanged();;
      return printThreadStackTraceCommandBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.VerifyMessageCommand, apache.rocketmq.v2.VerifyMessageCommand.Builder, apache.rocketmq.v2.VerifyMessageCommandOrBuilder> verifyMessageCommandBuilder_;
    /**
     * <pre>
     * Request client to verify the consumption of the appointed message.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.VerifyMessageCommand verify_message_command = 9;</code>
     * @return Whether the verifyMessageCommand field is set.
     */
    @java.lang.Override
    public boolean hasVerifyMessageCommand() {
      return commandCase_ == 9;
    }
    /**
     * <pre>
     * Request client to verify the consumption of the appointed message.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.VerifyMessageCommand verify_message_command = 9;</code>
     * @return The verifyMessageCommand.
     */
    @java.lang.Override
    public apache.rocketmq.v2.VerifyMessageCommand getVerifyMessageCommand() {
      if (verifyMessageCommandBuilder_ == null) {
        if (commandCase_ == 9) {
          return (apache.rocketmq.v2.VerifyMessageCommand) command_;
        }
        return apache.rocketmq.v2.VerifyMessageCommand.getDefaultInstance();
      } else {
        if (commandCase_ == 9) {
          return verifyMessageCommandBuilder_.getMessage();
        }
        return apache.rocketmq.v2.VerifyMessageCommand.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Request client to verify the consumption of the appointed message.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.VerifyMessageCommand verify_message_command = 9;</code>
     */
    public Builder setVerifyMessageCommand(apache.rocketmq.v2.VerifyMessageCommand value) {
      if (verifyMessageCommandBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        command_ = value;
        onChanged();
      } else {
        verifyMessageCommandBuilder_.setMessage(value);
      }
      commandCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * Request client to verify the consumption of the appointed message.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.VerifyMessageCommand verify_message_command = 9;</code>
     */
    public Builder setVerifyMessageCommand(
        apache.rocketmq.v2.VerifyMessageCommand.Builder builderForValue) {
      if (verifyMessageCommandBuilder_ == null) {
        command_ = builderForValue.build();
        onChanged();
      } else {
        verifyMessageCommandBuilder_.setMessage(builderForValue.build());
      }
      commandCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * Request client to verify the consumption of the appointed message.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.VerifyMessageCommand verify_message_command = 9;</code>
     */
    public Builder mergeVerifyMessageCommand(apache.rocketmq.v2.VerifyMessageCommand value) {
      if (verifyMessageCommandBuilder_ == null) {
        if (commandCase_ == 9 &&
            command_ != apache.rocketmq.v2.VerifyMessageCommand.getDefaultInstance()) {
          command_ = apache.rocketmq.v2.VerifyMessageCommand.newBuilder((apache.rocketmq.v2.VerifyMessageCommand) command_)
              .mergeFrom(value).buildPartial();
        } else {
          command_ = value;
        }
        onChanged();
      } else {
        if (commandCase_ == 9) {
          verifyMessageCommandBuilder_.mergeFrom(value);
        }
        verifyMessageCommandBuilder_.setMessage(value);
      }
      commandCase_ = 9;
      return this;
    }
    /**
     * <pre>
     * Request client to verify the consumption of the appointed message.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.VerifyMessageCommand verify_message_command = 9;</code>
     */
    public Builder clearVerifyMessageCommand() {
      if (verifyMessageCommandBuilder_ == null) {
        if (commandCase_ == 9) {
          commandCase_ = 0;
          command_ = null;
          onChanged();
        }
      } else {
        if (commandCase_ == 9) {
          commandCase_ = 0;
          command_ = null;
        }
        verifyMessageCommandBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Request client to verify the consumption of the appointed message.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.VerifyMessageCommand verify_message_command = 9;</code>
     */
    public apache.rocketmq.v2.VerifyMessageCommand.Builder getVerifyMessageCommandBuilder() {
      return getVerifyMessageCommandFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Request client to verify the consumption of the appointed message.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.VerifyMessageCommand verify_message_command = 9;</code>
     */
    @java.lang.Override
    public apache.rocketmq.v2.VerifyMessageCommandOrBuilder getVerifyMessageCommandOrBuilder() {
      if ((commandCase_ == 9) && (verifyMessageCommandBuilder_ != null)) {
        return verifyMessageCommandBuilder_.getMessageOrBuilder();
      } else {
        if (commandCase_ == 9) {
          return (apache.rocketmq.v2.VerifyMessageCommand) command_;
        }
        return apache.rocketmq.v2.VerifyMessageCommand.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Request client to verify the consumption of the appointed message.
     * </pre>
     *
     * <code>.apache.rocketmq.v2.VerifyMessageCommand verify_message_command = 9;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        apache.rocketmq.v2.VerifyMessageCommand, apache.rocketmq.v2.VerifyMessageCommand.Builder, apache.rocketmq.v2.VerifyMessageCommandOrBuilder> 
        getVerifyMessageCommandFieldBuilder() {
      if (verifyMessageCommandBuilder_ == null) {
        if (!(commandCase_ == 9)) {
          command_ = apache.rocketmq.v2.VerifyMessageCommand.getDefaultInstance();
        }
        verifyMessageCommandBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            apache.rocketmq.v2.VerifyMessageCommand, apache.rocketmq.v2.VerifyMessageCommand.Builder, apache.rocketmq.v2.VerifyMessageCommandOrBuilder>(
                (apache.rocketmq.v2.VerifyMessageCommand) command_,
                getParentForChildren(),
                isClean());
        command_ = null;
      }
      commandCase_ = 9;
      onChanged();;
      return verifyMessageCommandBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:apache.rocketmq.v2.TelemetryCommand)
  }

  // @@protoc_insertion_point(class_scope:apache.rocketmq.v2.TelemetryCommand)
  private static final apache.rocketmq.v2.TelemetryCommand DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new apache.rocketmq.v2.TelemetryCommand();
  }

  public static apache.rocketmq.v2.TelemetryCommand getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<TelemetryCommand>
      PARSER = new com.google.protobuf.AbstractParser<TelemetryCommand>() {
    @java.lang.Override
    public TelemetryCommand parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new TelemetryCommand(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<TelemetryCommand> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TelemetryCommand> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public apache.rocketmq.v2.TelemetryCommand getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

