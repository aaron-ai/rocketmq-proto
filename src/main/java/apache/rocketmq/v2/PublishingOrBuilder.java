// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: apache/rocketmq/v2/service.proto

package apache.rocketmq.v2;

public interface PublishingOrBuilder extends
    // @@protoc_insertion_point(interface_extends:apache.rocketmq.v2.Publishing)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Publishing settings below here is appointed by client, thus it is
   * unnecessary for server to push at present.
   * List of topics to which messages will publish to.
   * </pre>
   *
   * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
   */
  java.util.List<apache.rocketmq.v2.Resource> 
      getTopicsList();
  /**
   * <pre>
   * Publishing settings below here is appointed by client, thus it is
   * unnecessary for server to push at present.
   * List of topics to which messages will publish to.
   * </pre>
   *
   * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
   */
  apache.rocketmq.v2.Resource getTopics(int index);
  /**
   * <pre>
   * Publishing settings below here is appointed by client, thus it is
   * unnecessary for server to push at present.
   * List of topics to which messages will publish to.
   * </pre>
   *
   * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
   */
  int getTopicsCount();
  /**
   * <pre>
   * Publishing settings below here is appointed by client, thus it is
   * unnecessary for server to push at present.
   * List of topics to which messages will publish to.
   * </pre>
   *
   * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
   */
  java.util.List<? extends apache.rocketmq.v2.ResourceOrBuilder> 
      getTopicsOrBuilderList();
  /**
   * <pre>
   * Publishing settings below here is appointed by client, thus it is
   * unnecessary for server to push at present.
   * List of topics to which messages will publish to.
   * </pre>
   *
   * <code>repeated .apache.rocketmq.v2.Resource topics = 1;</code>
   */
  apache.rocketmq.v2.ResourceOrBuilder getTopicsOrBuilder(
      int index);

  /**
   * <pre>
   * Publishing settings below here are from server, it is essential for
   * server to push.
   * Body of message will be deflated if its size in bytes exceeds the
   * threshold.
   * </pre>
   *
   * <code>int32 compress_body_threshold = 2;</code>
   * @return The compressBodyThreshold.
   */
  int getCompressBodyThreshold();

  /**
   * <pre>
   * If the message body size exceeds `max_body_size`, broker servers would
   * reject the request. As a result, it is advisable that Producer performs
   * client-side check validation.
   * </pre>
   *
   * <code>int32 max_body_size = 3;</code>
   * @return The maxBodySize.
   */
  int getMaxBodySize();
}
